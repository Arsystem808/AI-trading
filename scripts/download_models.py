#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏–∑ GitHub Releases
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/download_models.py
"""

import requests
import tarfile
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REPO = "Arsystem808/AI-trading"
MODELS_DIR = Path("models")
EXTRACT_DIR = Path(".")

def download_latest_models():
    """–°–∫–∞—á–∞—Ç—å –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
    
    print("üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–µ–π...")
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π release
    url = f"https://api.github.com/repos/{REPO}/releases/latest"
    
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ: {e}")
        sys.exit(1)
    
    release = response.json()
    tag = release['tag_name']
    date = release['published_at'][:10]
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–ª–∏–∑: {tag} ({date})")
    
    # –ù–∞–π—Ç–∏ –∞—Ä—Ö–∏–≤ —Å –º–æ–¥–µ–ª—è–º–∏
    asset = None
    for a in release['assets']:
        if a['name'].endswith('.tar.gz') and 'sha256' not in a['name']:
            asset = a
            break
    
    if not asset:
        print("‚ùå –ê—Ä—Ö–∏–≤ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    filename = asset['name']
    download_url = asset['browser_download_url']
    size_mb = asset['size'] / 1024 / 1024
    
    print(f"\nüì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename} ({size_mb:.1f} MB)")
    print(f"üîó URL: {download_url}")
    
    # –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤
    try:
        response = requests.get(download_url, stream=True, timeout=30)
        response.raise_for_status()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        total_size = int(response.headers.get('content-length', 0))
        downloaded = 0
        
        with open(filename, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    downloaded += len(chunk)
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    if total_size > 0:
                        percent = (downloaded / total_size) * 100
                        bar_length = 40
                        filled = int(bar_length * downloaded / total_size)
                        bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
                        print(f'\r[{bar}] {percent:.1f}%', end='', flush=True)
        
        print(f"\n‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤
    print(f"\nüìÇ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞...")
    
    try:
        with tarfile.open(filename, 'r:gz') as tar:
            tar.extractall(EXTRACT_DIR)
        
        print("‚úÖ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ: {e}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π...\n")
    
    if MODELS_DIR.exists():
        models = list(MODELS_DIR.glob('alphapulse_*.joblib'))
        
        if models:
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π:\n")
            
            for model in sorted(models):
                size_kb = model.stat().st_size / 1024
                print(f"  üì¶ {model.name} ({size_kb:.1f} KB)")
        else:
            print("‚ö†Ô∏è  –ú–æ–¥–µ–ª–∏ alphapulse –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ models/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    
    # –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤
    try:
        Path(filename).unlink()
        print(f"\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filename}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filename}: {e}")
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–¥–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n")

if __name__ == '__main__':
    download_latest_models()
