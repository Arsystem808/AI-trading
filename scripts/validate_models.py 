#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏–∑ GitHub Release

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:
- –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
- –ü—Ä–æ–≤–µ—Ä–∫–∞ feature_names
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞–º

Usage:
    python scripts/validate_models.py [--verbose] [--fix]
    
    --verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    --fix: –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
"""

import argparse
import json
import sys
from pathlib import Path
from typing import Dict, List, Optional

import joblib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MODELS_DIR = Path("models")
CONFIG_DIR = Path("config")

def load_model_safe(model_path: Path) -> Optional[object]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏.
    
    Args:
        model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        
    Returns:
        model –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        return joblib.load(model_path)
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None


def extract_features(model: object) -> Optional[List[str]]:
    """
    –ò–∑–≤–ª–µ—á—å —Å–ø–∏—Å–æ–∫ —Ñ–∏—á –∏–∑ –º–æ–¥–µ–ª–∏.
    
    Args:
        model: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        
    Returns:
        List —Ñ–∏—á –∏–ª–∏ None
    """
    # LightGBM
    if hasattr(model, "feature_name_"):
        return list(model.feature_name_)
    
    # Scikit-learn
    if hasattr(model, "feature_names_in_"):
        return list(model.feature_names_in_)
    
    # XGBoost
    if hasattr(model, "get_booster"):
        try:
            booster = model.get_booster()
            return booster.feature_names
        except:
            pass
    
    return None


def validate_model_file(
    model_path: Path, 
    verbose: bool = False
) -> Dict[str, any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏.
    
    Args:
        model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    result = {
        "path": model_path,
        "valid": True,
        "issues": [],
        "features": None,
        "model_type": None
    }
    
    if verbose:
        print(f"\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞: {model_path.name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    size_kb = model_path.stat().st_size / 1024
    
    if size_kb < 1:
        result["valid"] = False
        result["issues"].append("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π (< 1 KB)")
        return result
    
    if verbose:
        print(f"  –†–∞–∑–º–µ—Ä: {size_kb:.1f} KB")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    model = load_model_safe(model_path)
    
    if model is None:
        result["valid"] = False
        result["issues"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
        return result
    
    # –¢–∏–ø –º–æ–¥–µ–ª–∏
    model_type = type(model).__name__
    result["model_type"] = model_type
    
    if verbose:
        print(f"  –¢–∏–ø: {model_type}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏—á
    features = extract_features(model)
    result["features"] = features
    
    if features:
        if verbose:
            print(f"  –§–∏—á–∏: {len(features)}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
            for feat in features[:5]:
                print(f"    ‚Ä¢ {feat}")
            
            if len(features) > 5:
                print(f"    ... (–≤—Å–µ–≥–æ {len(features)})")
    else:
        result["issues"].append("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å feature_names")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ predict (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å dummy –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        import numpy as np
        
        if features:
            n_features = len(features)
        else:
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≥–∞–¥–∞—Ç—å
            n_features = 50
        
        dummy_input = np.zeros((1, n_features))
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å predict
        _ = model.predict(dummy_input)
        
        if verbose:
            print(f"  ‚úÖ predict() —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        result["issues"].append(f"predict() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
    
    if result["issues"]:
        result["valid"] = False
    
    return result


def validate_config_file(
    config_path: Path, 
    verbose: bool = False
) -> Dict[str, any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.
    
    Args:
        config_path: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É
        verbose: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        
    Returns:
        dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    result = {
        "path": config_path,
        "valid": True,
        "issues": [],
        "config": None
    }
    
    if verbose:
        print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞: {config_path.name}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ JSON
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        result["config"] = config
        
    except Exception as e:
        result["valid"] = False
        result["issues"].append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return result
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ["model_artifact", "agent", "ticker"]
    
    for field in required_fields:
        if field not in config:
            result["valid"] = False
            result["issues"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏
    if "model_artifact" in config:
        model_path = Path(config["model_artifact"])
        
        if not model_path.exists():
            result["valid"] = False
            result["issues"].append(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        elif verbose:
            print(f"  ‚úÖ –ú–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {model_path.name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ scaler
    if "scaler_artifact" in config:
        scaler_path = Path(config["scaler_artifact"])
        
        if not scaler_path.exists():
            result["issues"].append(f"Scaler –Ω–µ –Ω–∞–π–¥–µ–Ω: {scaler_path}")
        elif verbose:
            print(f"  ‚úÖ Scaler —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {scaler_path.name}")
    
    if verbose and not result["issues"]:
        print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥ –≤–∞–ª–∏–¥–µ–Ω")
    
    return result


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Validate installed models",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Verbose output'
    )
    
    parser.add_argument(
        '--fix',
        action='store_true',
        help='Try to fix issues automatically'
    )
    
    args = parser.parse_args()
    
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π...\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    model_files = []
    
    if MODELS_DIR.exists():
        for ext in ["*.joblib", "*.pkl"]:
            model_files.extend(MODELS_DIR.glob(ext))
        
        # –ò—Å–∫–ª—é—á–∏—Ç—å scalers
        model_files = [
            f for f in model_files 
            if 'scaler' not in f.name.lower()
        ]
    
    if not model_files:
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        sys.exit(1)
    
    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(model_files)}\n")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    valid_models = 0
    invalid_models = 0
    
    all_results = []
    
    for model_path in sorted(model_files):
        result = validate_model_file(model_path, verbose=args.verbose)
        all_results.append(result)
        
        if result["valid"]:
            valid_models += 1
            
            if not args.verbose:
                print(f"‚úÖ {model_path.name}")
        else:
            invalid_models += 1
            
            print(f"‚ùå {model_path.name}")
            
            for issue in result["issues"]:
                print(f"  ‚Ä¢ {issue}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...\n")
    
    config_files = []
    
    if CONFIG_DIR.exists():
        config_files = list(CONFIG_DIR.glob("*.json"))
    
    if not config_files:
        print("‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    else:
        valid_configs = 0
        invalid_configs = 0
        
        for config_path in sorted(config_files):
            result = validate_config_file(config_path, verbose=args.verbose)
            
            if result["valid"]:
                valid_configs += 1
                
                if not args.verbose:
                    print(f"‚úÖ {config_path.name}")
            else:
                invalid_configs += 1
                
                print(f"‚ùå {config_path.name}")
                
                for issue in result["issues"]:
                    print(f"  ‚Ä¢ {issue}")
        
        print(f"\nüìä –ö–æ–Ω—Ñ–∏–≥–∏: {valid_configs}/{len(config_files)} –≤–∞–ª–∏–¥–Ω—ã")
    
    # Summary
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–ò")
    print(f"{'='*60}")
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {valid_models}")
    print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {invalid_models}")
    print(f"\n–í—Å–µ–≥–æ: {len(model_files)}")
    
    # Exit code
    if invalid_models > 0:
        sys.exit(1)
    else:
        print("\n‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –≤–∞–ª–∏–¥–Ω—ã!")
        sys.exit(0)


if __name__ == '__main__':
    main()
