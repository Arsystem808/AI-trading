#!/usr/bin/env python3
"""
M7 Strategy Individual Backtest
Tests M7 strategy alone (no ensemble)
"""

import sys
import os
import json
from pathlib import Path
from datetime import datetime, timedelta

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from scripts.backtest import run_backtest

def main():
    """Run backtest for M7 strategy only"""
    
    # Test parameters
    tickers = ["X:BTCUSD", "X:ETHUSD", "AAPL", "MSFT", "GOOGL"]
    initial_capital = 100000
    end_date = datetime.now()
    start_date = end_date - timedelta(days=90)  # 3 months
    
    print("=" * 50)
    print("M7 STRATEGY BACKTEST")
    print("=" * 50)
    print(f"Period: {start_date.date()} to {end_date.date()}")
    print(f"Tickers: {', '.join(tickers)}")
    print(f"Initial Capital: ${initial_capital:,.0f}")
    print()
    
    # Run backtest with M7 only
    results = run_backtest(
        tickers=tickers,
        start_date=start_date,
        end_date=end_date,
        initial_capital=initial_capital,
        strategy_name="M7"
    )
    
    # Save results
    output_file = f"results/m7_backtest_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    Path("results").mkdir(exist_ok=True)
    
    with open(output_file, 'w') as f:
        json.dump(results, f, indent=2, default=str)
    
    print(f"\nâœ… Results saved to: {output_file}")
    
    # Print summary
    print("\n" + "=" * 50)
    print("SUMMARY")
    print("=" * 50)
    print(f"Final Capital: ${results.get('final_capital', 0):,.2f}")
    print(f"Total Return: {results.get('total_return_pct', 0):.2f}%")
    print(f"Total Trades: {results.get('total_trades', 0)}")
    
    return results

if __name__ == "__main__":
    main()
