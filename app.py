import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.graph_objects as go
from core.strategy import TradingStrategy
import glob
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Arxora - AI Trading Platform",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
    <style>
    .main {
        background-color: #0E1117;
    }
    .stButton>button {
        background-color: #5865F2;
        color: white;
        border-radius: 8px;
        border: none;
        padding: 0.5rem 2rem;
        font-weight: 600;
    }
    .stButton>button:hover {
        background-color: #4752C4;
    }
    h1 {
        color: #5865F2;
        font-weight: 700;
    }
    .metric-card {
        background-color: #1E2130;
        padding: 1rem;
        border-radius: 10px;
        border-left: 3px solid #5865F2;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("<h1 style='text-align: center; color: #5865F2;'>Arxora</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: #8E9297;'>trade smarter.</p>", unsafe_allow_html=True)

# –°–∞–π–¥–±–∞—Ä
st.sidebar.title("AI agents")
st.sidebar.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å**")

# –ú–æ–¥–µ–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤
model_options = {
    "Octopus": "Orchestrator",
    "AlphaPulse": "Alpha signals",
    "Global": "Global market analysis",
    "M7": "Magnificent 7 stocks",
    "W7": "Week 7 day signals"
}

selected_model = st.sidebar.radio(
    "–ú–æ–¥–µ–ª—å:",
    options=list(model_options.keys()),
    format_func=lambda x: f"{x} - {model_options[x]}"
)

# –í–≤–æ–¥ —Ç–∏–∫–µ—Ä–∞
st.sidebar.markdown("---")
ticker = st.sidebar.text_input("–¢–∏–∫–µ—Ä", value="QQQ", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä...")

# –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
analyze_button = st.sidebar.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True)

# –¢–∞–±—ã
tab1, tab2, tab3, tab4 = st.tabs(["üìä Analysis", "ü§ñ AI Insights", "üìà Charts", "‚ö° Performance"])

# === ANALYSIS TAB ===
with tab1:
    if analyze_button:
        with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫..."):
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy = TradingStrategy()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                result = strategy.analyze(ticker, selected_model)
                
                if result and 'signal' in result:
                    st.success(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–ª—è {ticker} –∑–∞–≤–µ—Ä—à—ë–Ω!")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    col1, col2, col3 = st.columns(3)
                    
                    # –°–∏–≥–Ω–∞–ª
                    signal_color = {
                        "STRONG BUY": "üü¢",
                        "BUY": "üü¢",
                        "HOLD": "üü°",
                        "SELL": "üî¥",
                        "STRONG SELL": "üî¥"
                    }.get(result['signal'], "‚ö™")
                    
                    with col1:
                        st.metric(
                            label="Signal",
                            value=f"{signal_color} {result['signal']}"
                        )
                    
                    # Confidence
                    with col2:
                        confidence_val = result.get('confidence', 0)
                        st.metric(
                            label="Confidence",
                            value=f"{confidence_val:.1f}%"
                        )
                    
                    # Price
                    with col3:
                        current_price = result.get('current_price', 0)
                        st.metric(
                            label="Current Price",
                            value=f"${current_price:.2f}"
                        )
                    
                    # Breakdown
                    st.markdown("### üìã Signal Breakdown")
                    
                    if 'breakdown' in result and result['breakdown']:
                        for agent, data in result['breakdown'].items():
                            with st.expander(f"ü§ñ {agent}"):
                                agent_col1, agent_col2 = st.columns(2)
                                with agent_col1:
                                    st.write(f"**Signal:** {data.get('signal', 'N/A')}")
                                with agent_col2:
                                    st.write(f"**Confidence:** {data.get('confidence', 0):.1f}%")
                                
                                if 'reasoning' in 
                                    st.write(f"**Reasoning:** {data['reasoning']}")
                    else:
                        st.info("No detailed breakdown available")
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
    else:
        st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ —Ç–∏–∫–µ—Ä, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å**")

# === AI INSIGHTS TAB ===
with tab2:
    st.header("ü§ñ AI Insights")
    st.info("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç AI –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.")

# === CHARTS TAB ===
with tab3:
    st.header("üìà Charts")
    st.info("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.")

# === PERFORMANCE TAB ===
with tab4:
    st.header("üìä Performance Tracking")
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if st.button("üîÑ –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å performance_summary.csv"):
        perf_files = glob.glob("performance_data/*.csv")
        
        if not perf_files:
            st.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ performance –≤ –ø–∞–ø–∫–µ performance_data/")
        else:
            all_data = []
            for file in perf_files:
                try:
                    df = pd.read_csv(file)
                    all_data.append(df)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file}: {e}")
            
            if all_
                combined = pd.concat(all_data, ignore_index=True)
                combined.to_csv("performance_summary.csv", index=False)
                st.success("‚úÖ –§–∞–π–ª –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω! –û–±–Ω–æ–≤–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5)")
    
    st.markdown("---")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    if os.path.exists("performance_summary.csv"):
        try:
            df_perf = pd.read_csv("performance_summary.csv")
            
            if not df_perf.empty and 'timestamp' in df_perf.columns:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
                df_perf['timestamp'] = pd.to_datetime(df_perf['timestamp'])
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
                agents = df_perf['agent'].unique() if 'agent' in df_perf.columns else []
                
                if len(agents) > 0:
                    st.subheader("üìà Performance Charts")
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
                    for agent in agents:
                        agent_data = df_perf[df_perf['agent'] == agent].copy()
                        agent_data = agent_data.sort_values('timestamp')
                        
                        # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
                        fig = go.Figure()
                        
                        # –õ–∏–Ω–∏—è accuracy
                        fig.add_trace(go.Scatter(
                            x=agent_data['timestamp'],
                            y=agent_data['accuracy'],
                            mode='lines+markers',
                            name='Accuracy',
                            line=dict(color='#00D9FF', width=2),
                            marker=dict(size=6)
                        ))
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
                        fig.update_layout(
                            title=f"üìä {agent} - Accuracy Over Time",
                            xaxis_title="Time",
                            yaxis_title="Accuracy (%)",
                            template="plotly_dark",
                            height=400,
                            hovermode='x unified'
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        with st.expander(f"üìã {agent} Statistics"):
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("Avg Accuracy", f"{agent_data['accuracy'].mean():.1f}%")
                            with col2:
                                st.metric("Max Accuracy", f"{agent_data['accuracy'].max():.1f}%")
                            with col3:
                                st.metric("Min Accuracy", f"{agent_data['accuracy'].min():.1f}%")
                else:
                    st.info("üìä –î–∞–Ω–Ω—ã—Ö –ø–æ –∞–≥–µ–Ω—Ç–∞–º –µ—â—ë –Ω–µ—Ç.")
            else:
                st.warning("‚ö†Ô∏è –§–∞–π–ª performance_summary.csv –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.info("üí° –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'üîÑ –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å performance_summary.csv'")
    else:
        st.info("üìÇ –§–∞–π–ª performance_summary.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")

# Footer
st.markdown("---")
st.markdown(
    "<p style='text-align: center; color: #8E9297;'>Mode: AI ‚Ä¢ Model: {} ‚Ä¢ Powered by Arxora</p>".format(selected_model),
    unsafe_allow_html=True
)
