import os
import re
import hashlib
import random
import streamlit as st
from dotenv import load_dotenv
from core.strategy import analyze_asset

load_dotenv()
st.set_page_config(page_title="CapinteL-Q ‚Äî —Ç—Ä–µ–π–¥-–ò–ò (MVP)", page_icon="üìà", layout="centered")
st.markdown("<h1 style='margin-bottom:0.2rem;'>CapinteL-Q ‚Äî —Ç—Ä–µ–π–¥-–ò–ò (MVP)</h1>", unsafe_allow_html=True)
st.caption("")

# =====================
# –¢–í–û–ò –§–†–ê–ó–´ (–ø—Ä–æ—Å—Ç–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ)
# =====================
CUSTOM_PHRASES = {
    "BUY": [
        "–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–∫—É–ø–∫–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {range_low}‚Äì{range_high}{unit_suffix}. AI-–∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —ç—Ç–æ–π –∑–æ–Ω–µ."
    ],
    "SHORT": [
        "–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø—Ä–æ–¥–∞–∂–∞ (short) –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {range_low}‚Äì{range_high}{unit_suffix}. AI-–∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–ª—å–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–π –∑–æ–Ω–µ."
    ],
    "WAIT": [
        "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –¥–ª—è —Å–µ–±—è —è—Å–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã, —è –±—ã –Ω–µ —Ç–æ—Ä–æ–ø–∏–ª—Å—è.",
        "–Ø –±—ã –ø–æ–∫–∞ –Ω–µ —Ç–æ—Ä–æ–ø–∏–ª—Å—è –∏ –ø–æ–¥–æ–∂–¥–∞–ª –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º –∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.",
        "–ü–æ–∫–∞ –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏: –∂–¥—É –±–æ–ª–µ–µ —è—Å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞. –ù–æ–≤–æ—Å—Ç–∏ –º–æ–≥—É—Ç —Å–¥–≤–∏–Ω—É—Ç—å —Ä—ã–Ω–æ–∫ –∏ –ø–æ–º–µ–Ω—è—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å."
    ],
    "CONTEXT": {
        "support": ["–ê–Ω–∞–ª–∏–∑, –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–π –ò–ò, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ç—É –∑–æ–Ω—É –∫–∞–∫ –æ–±–ª–∞—Å—Ç—å —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏."],
        "resistance": ["–ê–Ω–∞–ª–∏–∑, –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã–π –ò–ò, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç—Ç—É –∑–æ–Ω—É –∫–∞–∫ –æ–±–ª–∞—Å—Ç—å —Å–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è."],
        "neutral": ["–†—ã–Ω–æ–∫ –≤ –±–∞–ª–∞–Ω—Å–µ ‚Äî –¥–µ–π—Å—Ç–≤—É—é —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É."]
    },
    "STOPLINE": [
        "–°—Ç–æ–ø-–ª–æ—Å—Å: {sl}. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ ~{risk_pct}% –æ—Ç –≤—Ö–æ–¥–∞. –£—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π."
    ],
    "DISCLAIMER": "–î–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–º —Ç–æ–≥–æ, –∫–∞–∫ AI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–¥–µ–∏ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä—è–º–æ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö —Å–æ–ø—Ä—è–∂–µ–Ω–∞ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º."
}

# =====================
# –•–ï–õ–ü–ï–†–´ –î–õ–Ø –¢–ï–ö–°–¢–ê
# =====================
def _fmt(x):
    return f"{float(x):.2f}"

def compute_display_range(levels, widen_factor=0.25):
    """–°—Ç—Ä–æ–∏–º –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∫—Ä—É–≥ entry –ø–æ —á–µ—Ç–≤–µ—Ä—Ç–∏ —Ä–∏—Å–∫–∞."""
    entry = float(levels["entry"]); sl = float(levels["sl"])
    risk = abs(entry - sl)
    width = max(risk * widen_factor, 0.01)
    low, high = entry - width, entry + width
    return _fmt(min(low, high)), _fmt(max(low, high))

def compute_risk_pct(levels):
    entry = float(levels["entry"]); sl = float(levels["sl"])
    return "‚Äî" if entry == 0 else f"{abs(entry - sl)/abs(entry)*100.0:.1f}"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã —Ü–µ–Ω—ã –ø–æ —Ç–∏–ø—É –∞–∫—Ç–∏–≤–∞
UNIT_STYLE = {"equity":"za_akciyu","etf":"omit","crypto":"per_base","fx":"per_base","option":"per_contract"}
ETF_HINTS = {"SPY","QQQ","IWM","DIA","EEM","EFA","XLK","XLF","XLE","XLY","XLI","XLV","XLP","XLU","VNQ","GLD","SLV"}

def detect_asset_class(ticker: str):
    t = ticker.upper().strip()
    if t.startswith("X:"): return "crypto"   # Polygon crypto
    if t.startswith("C:"): return "fx"       # Polygon FX
    if t.startswith("O:"): return "option"   # options
    if re.match(r"^[A-Z]{2,10}[-:/]?USD[TDC]?$", t): return "crypto"  # BTCUSD / ETHUSDT / SOL-USD
    if t in ETF_HINTS: return "etf"
    return "equity"

def parse_base_symbol(ticker: str):
    t = ticker.upper().replace("X:","").replace("C:","").replace(":","").replace("/","").replace("-","")
    for q in ("USDT","USDC","USD","EUR","JPY","GBP","BTC","ETH"):
        if t.endswith(q) and len(t) > len(q):
            return t[:-len(q)]
    return re.split(r"[-:/]", ticker.upper())[0].replace("X:","").replace("C:","")

def unit_suffix(ticker: str) -> str:
    kind = detect_asset_class(ticker)
    style = UNIT_STYLE.get(kind, "omit")
    if style == "za_akciyu":    return " –∑–∞ –∞–∫—Ü–∏—é"
    if style == "per_base":      return f" –∑–∞ 1 {parse_base_symbol(ticker)}"
    if style == "per_contract":  return " –∑–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç"
    return ""

def rr_line(levels):
    risk = abs(levels["entry"] - levels["sl"])
    if risk <= 1e-9: return ""
    rr1 = abs(levels["tp1"] - levels["entry"]) / risk
    rr2 = abs(levels["tp2"] - levels["entry"]) / risk
    rr3 = abs(levels["tp3"] - levels["entry"]) / risk
    return f"RR ‚âà 1:{rr1:.1f} (TP1) ¬∑ 1:{rr2:.1f} (TP2) ¬∑ 1:{rr3:.1f} (TP3)"

def render_plan_line(action, levels, ticker="", seed_extra=""):
    seed = int(hashlib.sha1(f"{ticker}{seed_extra}{levels['entry']}{levels['sl']}{action}".encode()).hexdigest(), 16) % (2**32)
    rnd = random.Random(seed)

    if action == "WAIT":
        return rnd.choice(CUSTOM_PHRASES["WAIT"])

    rng_low, rng_high = compute_display_range(levels)
    us = unit_suffix(ticker)
    tpl = CUSTOM_PHRASES[action][0]  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å—Ç–∏–ª—å –±–µ–∑ —Ä–æ—Ç–∞—Ü–∏–∏
    return tpl.format(range_low=rng_low, range_high=rng_high, unit_suffix=us)

def render_context_line(kind_key="neutral"):
    return CUSTOM_PHRASES["CONTEXT"].get(kind_key, CUSTOM_PHRASES["CONTEXT"]["neutral"])[0]

def render_stopline(levels):
    line = CUSTOM_PHRASES["STOPLINE"][0]
    return line.format(sl=_fmt(levels["sl"]), risk_pct=compute_risk_pct(levels))

# =====================
# UI helpers
# =====================
def card(title, value, sub=None, color=None):
    bg = "#141a20"
    if color == "green": bg = "#123b2a"
    elif color == "red": bg = "#3b1f20"
    st.markdown(
        f"""
        <div style="background:{bg}; padding:12px 16px; border-radius:14px; border:1px solid rgba(255,255,255,0.06); margin:6px 0;">
            <div style="font-size:0.9rem; opacity:0.85;">{title}</div>
            <div style="font-size:1.4rem; font-weight:700; margin-top:4px;">{value}</div>
            {f"<div style='font-size:0.8rem; opacity:0.7; margin-top:2px;'>{sub}</div>" if sub else ""}
        </div>
        """,
        unsafe_allow_html=True,
    )

# =====================
# Inputs
# =====================
col1, col2 = st.columns([2,1])
with col1:
    ticker = st.text_input("–¢–∏–∫–µ—Ä", value="AAPL").strip().upper()
with col2:
    horizon = st.selectbox(
        "–ì–æ—Ä–∏–∑–æ–Ω—Ç",
        ["–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ–∫ (1‚Äì5 –¥–Ω–µ–π)", "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (1‚Äì4 –Ω–µ–¥–µ–ª–∏)", "–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å—è—Ü–µ–≤)"],
        index=1
    )

run = st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary")

# =====================
# Main
# =====================
if run:
    try:
        out = analyze_asset(ticker=ticker, horizon=horizon)

        # –ë–æ–ª—å—à–∞—è —Ü–µ–Ω–∞
        st.markdown(
            f"<div style='font-size:3rem; font-weight:800; text-align:center; margin:6px 0 14px 0;'>${out['last_price']:.2f}</div>",
            unsafe_allow_html=True,
        )

        # –ë–∞–Ω–Ω–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        action = out["recommendation"]["action"]
        conf = out["recommendation"].get("confidence", 0)
        conf_pct = f"{int(round(float(conf)*100))}%"
        action_text = "Buy LONG" if action == "BUY" else ("Sell SHORT" if action == "SHORT" else "WAIT")
        st.markdown(
            f"""
            <div style="background:#0f1b2b; padding:14px 16px; border-radius:16px; border:1px solid rgba(255,255,255,0.06); margin-bottom:10px;">
                <div style="font-size:1.15rem; font-weight:700;">{action_text}</div>
                <div style="opacity:0.75; font-size:0.95rem; margin-top:2px;">{conf_pct} confidence</div>
            </div>
            """,
            unsafe_allow_html=True,
        )

        lv = out["levels"]
        # BUY/SHORT: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏; WAIT: —Å–∫—Ä—ã–≤–∞–µ–º
        if action in ("BUY", "SHORT"):
            c1, c2 = st.columns(2)
            with c1: card("Entry", f"{lv['entry']:.2f}", color="green")
            with c2: card("Stop Loss", f"{lv['sl']:.2f}", color="red")

            c1, c2, c3 = st.columns(3)
            with c1: card("TP 1", f"{lv['tp1']:.2f}", sub=f"Probability {int(round(out['probs']['tp1']*100))}%")
            with c2: card("TP 2", f"{lv['tp2']:.2f}", sub=f"Probability {int(round(out['probs']['tp2']*100))}%")
            with c3: card("TP 3", f"{lv['tp3']:.2f}", sub=f"Probability {int(round(out['probs']['tp3']*100))}%")

            rr = rr_line(lv)
            if rr:
                st.markdown(f"<div style='opacity:0.75; margin-top:4px'>{rr}</div>", unsafe_allow_html=True)

        # –ü–ª–∞–Ω —Ñ—Ä–∞–∑–æ–π (—Ç–≤–æ–π —Å—Ç–∏–ª—å)
        plan = render_plan_line(action, lv, ticker=ticker, seed_extra=horizon)
        st.markdown(f"<div style='margin-top:8px'>{plan}</div>", unsafe_allow_html=True)

        # –ö—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ctx_key = "neutral"
        if action == "BUY": ctx_key = "support"
        elif action == "SHORT": ctx_key = "resistance"
        ctx = render_context_line(ctx_key)
        st.markdown(f"<div style='opacity:0.9'>{ctx}</div>", unsafe_allow_html=True)

        # –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ —Å—Ç–æ–ø
        if action in ("BUY","SHORT"):
            stopline = render_stopline(lv)
            st.markdown(f"<div style='opacity:0.9; margin-top:4px'>{stopline}</div>", unsafe_allow_html=True)

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è (–∏–∑ –±—ç–∫—ç–Ω–¥–∞)
        if out.get("alt"):
            st.markdown(
                f"<div style='margin-top:6px;'><b>–ï—Å–ª–∏ –ø–æ–π–¥—ë—Ç –ø—Ä–æ—Ç–∏–≤ –±–∞–∑–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è:</b> {out['alt']}</div>",
                unsafe_allow_html=True,
            )

        # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
        st.caption(CUSTOM_PHRASES["DISCLAIMER"])

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
else:
    st.info("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª.")
