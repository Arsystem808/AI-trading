# app.py
# Octopus ‚Äî –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã + –ò—Å—Ç–æ—Ä–∏—è (Rules / AI override)
# –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç "Timeline" —Å —Ç–æ—á–∫–∞–º–∏ –Ω–∞–¥/–ø–æ–¥ —Å–≤–µ—á–∞–º–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å—é —Ü–≤–µ—Ç–∞ = confidence.
# –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–æ–≤ "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π".

from __future__ import annotations

import os
import io
import json
from dataclasses import dataclass
from datetime import datetime, date, timedelta, timezone
from typing import List, Optional, Literal, Tuple

import numpy as np
import pandas as pd
import streamlit as st
import plotly.graph_objects as go

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å yfinance –¥–ª—è OHLC; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
try:
    import yfinance as yf  # type: ignore
    YF_AVAILABLE = True
except Exception:
    YF_AVAILABLE = False


# ----------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ----------------------------
st.set_page_config(
    page_title="Octopus ‚Äî –ì—Ä–∞—Ñ–∏–∫ + –ò—Å—Ç–æ—Ä–∏—è",
    layout="wide",
    page_icon="üß†",
)

# –ü–∞–ª–∏—Ç—Ä—ã –¥–ª—è —Ç–æ—á–µ–∫
BLUES = "Blues"       # –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
PURPLES = "Purples"   # –¥–ª—è AI override

# ----------------------------
# –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
# ----------------------------
Kind = Literal["rules", "override"]

@dataclass
class EventPoint:
    ts: pd.Timestamp          # timestamp –≤ UTC
    kind: Kind                # "rules" | "override"
    confidence: float         # 0..100
    side: Optional[Literal["long", "short"]] = None  # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ


# ----------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# ----------------------------
def _to_utc(ts: pd.Timestamp | datetime | str) -> pd.Timestamp:
    if isinstance(ts, pd.Timestamp):
        t = ts
    elif isinstance(ts, datetime):
        t = pd.Timestamp(ts)
    else:
        t = pd.Timestamp(ts)
    if t.tzinfo is None:
        t = t.tz_localize("UTC")
    else:
        t = t.tz_convert("UTC")
    return t


def load_ohlc(
    symbol: str,
    start: datetime,
    end: datetime,
    interval: str = "1h",
) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç OHLC –≤ UTC. –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç yfinance.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: Open, High, Low, Close, Volume
    """
    if not YF_AVAILABLE:
        st.error("–ú–æ–¥—É–ª—å yfinance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç: pip install yfinance")
        return pd.DataFrame()

    yf_symbol = symbol
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–∏–∫–µ—Ä–æ–≤: BTC-USD, ETH-USD, AAPL
    df = yf.download(
        yf_symbol,
        start=start,
        end=end + timedelta(days=1),
        interval=interval,
        auto_adjust=False,
        progress=False,
        threads=True,
    )
    if df.empty:
        return df

    # –£ yfinance –∏–Ω–¥–µ–∫—Å tz-–Ω–∞–∏–≤–Ω—ã–π –≤ –ª–æ–∫–∞–ª–∏ –ù—å—é-–ô–æ—Ä–∫; –ø—Ä–∏–≤–æ–¥–∏–º –∫ UTC.
    df.index = pd.to_datetime(df.index, utc=True)
    df = df.rename(
        columns={
            "Open": "Open",
            "High": "High",
            "Low": "Low",
            "Close": "Close",
            "Volume": "Volume",
        }
    )
    return df[["Open", "High", "Low", "Close", "Volume"]]


def parse_events_from_json_bytes(
    content: bytes
) -> List[EventPoint]:
    """
    –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:
    {
      "ts": "2025-10-01T12:30:00Z",
      "kind": "rules" | "override",
      "confidence": 63.0,
      "side": "long" | "short" | null
    }
    """
    payload = json.loads(content.decode("utf-8"))
    events: List[EventPoint] = []
    if isinstance(payload, dict) and "events" in payload:
        payload = payload["events"]
    if not isinstance(payload, list):
        raise ValueError("JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º —Å –∫–ª—é—á–æ–º 'events'")

    for item in payload:
        ts = _to_utc(item["ts"])
        kind = str(item["kind"]).lower()
        if kind not in ("rules", "override"):
            continue
        confidence = float(item.get("confidence", 0.0))
        side = item.get("side")
        if side is not None:
            side = str(side).lower()
            if side not in ("long", "short"):
                side = None
        events.append(EventPoint(ts=ts, kind=kind, confidence=confidence, side=side))
    return events


def demo_events_from_ohlc(
    df: pd.DataFrame,
    seed: int = 7,
    p_rules: float = 0.06,
    p_override: float = 0.04,
) -> List[EventPoint]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-—Å–æ–±—ã—Ç–∏—è –ø–æ–≤–µ—Ä—Ö OHLC, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    if df.empty:
        return []
    rng = np.random.default_rng(seed)
    idx = df.index

    mask_rules = rng.random(len(idx)) < p_rules
    mask_override = rng.random(len(idx)) < p_override

    events: List[EventPoint] = []
    for ts, flag in zip(idx, mask_rules):
        if flag:
            events.append(
                EventPoint(
                    ts=_to_utc(ts),
                    kind="rules",
                    confidence=float(np.clip(rng.normal(65, 15), 5, 99)),
                    side=rng.choice(["long", "short"]),
                )
            )
    for ts, flag in zip(idx, mask_override):
        if flag:
            events.append(
                EventPoint(
                    ts=_to_utc(ts),
                    kind="override",
                    confidence=float(np.clip(rng.normal(55, 20), 5, 99)),
                    side=rng.choice(["long", "short"]),
                )
            )
    return events


def _align_events_to_candles(
    events: List[EventPoint], df: pd.DataFrame
) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –Ω–∞ –¥–≤–∞ DataFrame (rules, override) –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–º Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–≤–µ—á–µ–π (–Ω–∞–¥ High –∏ –ø–æ–¥ Low).
    """
    if df.empty or not events:
        return pd.DataFrame(), pd.DataFrame()

    ts_to_row = pd.Series(range(len(df)), index=df.index)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü
    recs_rules = []
    recs_over = []

    for e in events:
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∑–∂–∞–π—à—É—é —Å–≤–µ—á—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (floor –∫ –∏–Ω–¥–µ–∫—Å—É)
        # –ë–µ—Ä–µ–º –∏–Ω–¥–µ–∫—Å —Å–≤–µ—á–∏, —á–µ–π ts <= e.ts
        ts = e.ts
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –Ω–µ –ø–æ–∑–∂–µ ts
        pos = df.index.get_indexer([ts], method="nearest")
        if len(pos) == 0 or pos[0] < 0:
            continue
        i = int(pos[0])
        i = min(max(i, 0), len(df) - 1)
        row_ts = df.index[i]
        high = float(df.iloc[i]["High"])
        low = float(df.iloc[i]["Low"])
        mid = (high + low) / 2.0
        atr = max(high - low, 1e-9)

        if e.kind == "rules":
            # —Ç–æ—á–∫–∞ –Ω–∞–¥ —Å–≤–µ—á–æ–π
            y = high + atr * 0.06
            recs_rules.append(
                dict(
                    ts=row_ts,
                    y=y,
                    confidence=float(e.confidence),
                    side=e.side or "",
                )
            )
        else:
            # —Ç–æ—á–∫–∞ –ø–æ–¥ —Å–≤–µ—á–æ–π
            y = low - atr * 0.06
            recs_over.append(
                dict(
                    ts=row_ts,
                    y=y,
                    confidence=float(e.confidence),
                    side=e.side or "",
                )
            )

    rules_df = pd.DataFrame.from_records(recs_rules)
    over_df = pd.DataFrame.from_records(recs_over)
    return rules_df, over_df


def build_chart(
    df: pd.DataFrame,
    rules_df: pd.DataFrame,
    over_df: pd.DataFrame,
    show_rules: bool,
    show_override: bool,
    min_conf: float,
    title: str,
) -> go.Figure:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç candlestick + 2 Scatter‚Äë—Å–ª–æ—è —Ç–æ—á–µ–∫ —Å colorscale –ø–æ confidence.
    """
    fig = go.Figure()

    # –°–≤–µ—á–∏
    fig.add_trace(
        go.Candlestick(
            x=df.index,
            open=df["Open"],
            high=df["High"],
            low=df["Low"],
            close=df["Close"],
            name="–¶–µ–Ω–∞",
            increasing_line_color="#26a69a",
            decreasing_line_color="#ef5350",
            showlegend=True,
        )
    )

    # –§–∏–ª—å—Ç—Ä—ã –ø–æ –ø–æ—Ä–æ–≥—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if show_rules and not rules_df.empty:
        rr = rules_df[rules_df["confidence"] >= float(min_conf)].copy()
        if not rr.empty:
            fig.add_trace(
                go.Scatter(
                    x=rr["ts"],
                    y=rr["y"],
                    mode="markers",
                    name="–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞",
                    marker=dict(
                        size=np.clip((rr["confidence"] / 100.0) * 14 + 6, 6, 20),
                        color=rr["confidence"],
                        colorscale=BLUES,
                        cmin=0,
                        cmax=100,
                        line=dict(color="rgba(0,0,0,0.0)", width=0),
                        opacity=0.95,
                        symbol="circle",
                    ),
                    hovertemplate=(
                        "<b>Rules</b><br>"
                        "–í—Ä–µ–º—è: %{x}<br>"
                        "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %{marker.color:.1f}%<br>"
                        "–°—Ç–æ—Ä–æ–Ω–∞: %{text}<extra></extra>"
                    ),
                    text=rr["side"].fillna(""),
                    showlegend=True,
                )
            )

    if show_override and not over_df.empty:
        oo = over_df[over_df["confidence"] >= float(min_conf)].copy()
        if not oo.empty:
            fig.add_trace(
                go.Scatter(
                    x=oo["ts"],
                    y=oo["y"],
                    mode="markers",
                    name="AI override",
                    marker=dict(
                        size=np.clip((oo["confidence"] / 100.0) * 14 + 6, 6, 20),
                        color=oo["confidence"],
                        colorscale=PURPLES,
                        cmin=0,
                        cmax=100,
                        line=dict(color="rgba(0,0,0,0.0)", width=0),
                        opacity=0.95,
                        symbol="circle",
                    ),
                    hovertemplate=(
                        "<b>AI override</b><br>"
                        "–í—Ä–µ–º—è: %{x}<br>"
                        "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %{marker.color:.1f}%<br>"
                        "–°—Ç–æ—Ä–æ–Ω–∞: %{text}<extra></extra>"
                    ),
                    text=oo["side"].fillna(""),
                    showlegend=True,
                )
            )

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    fig.update_layout(
        template="plotly_dark",
        margin=dict(l=10, r=10, t=50, b=10),
        height=720,
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="left", x=0),
        title=dict(text=title, x=0.01, xanchor="left"),
        xaxis=dict(
            showgrid=False,
            rangeslider=dict(visible=False),
        ),
        yaxis=dict(showgrid=True, gridcolor="rgba(255,255,255,0.08)"),
        hovermode="x unified",
    )
    return fig


# ----------------------------
# UI
# ----------------------------
with st.sidebar:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    default_symbol = "BTC-USD"
    symbol = st.text_input("–¢–∏–∫–µ—Ä", value=default_symbol, help="–ü—Ä–∏–º–µ—Ä: BTC-USD, ETH-USD, AAPL")
    today = datetime.now(timezone.utc).date()
    start_date: date = st.date_input("–ù–∞—á–∞–ª–æ", value=today - timedelta(days=30))
    end_date: date = st.date_input("–ö–æ–Ω–µ—Ü", value=today)
    interval = st.selectbox("–ò–Ω—Ç–µ—Ä–≤–∞–ª", ["15m", "30m", "1h", "4h", "1d"], index=2)

    st.markdown("---")
    st.caption("–°–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–∞–π–º–ª–∞–π–Ω–∞")
    source_mode = st.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫",
        ["–î–µ–º–æ (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å)", "–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON"],
        index=0,
        horizontal=False,
    )
    min_conf = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, %", 0, 100, 40, step=1)
    show_rules = st.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞", value=True)
    show_override = st.toggle("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å AI override", value=True)

    st.markdown("---")
    st.caption("–≠–∫—Å–ø–æ—Ä—Ç")
    want_html = st.toggle("–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ HTML", value=False)

st.title("–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã + –ò—Å—Ç–æ—Ä–∏—è (Rules / AI override)")

# –ó–∞–≥—Ä—É–∑–∫–∞ OHLC
start_dt = datetime.combine(start_date, datetime.min.time(), tzinfo=timezone.utc)
end_dt = datetime.combine(end_date, datetime.max.time(), tzinfo=timezone.utc)

with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã..."):
    ohlc = load_ohlc(symbol, start=start_dt, end=end_dt, interval=interval)

if ohlc.empty:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞/—Ç–∏–∫–µ—Ä–∞.")
    st.stop()

# –°–æ–±—ã—Ç–∏—è
events: List[EventPoint] = []
if source_mode.startswith("–î–µ–º–æ"):
    events = demo_events_from_ohlc(ohlc)
else:
    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π", type=["json"])
    if uploaded is not None:
        try:
            events = parse_events_from_json_bytes(uploaded.read())
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(events)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            events = []

# –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —Å–≤–µ—á–∞–º
rules_df, over_df = _align_events_to_candles(events, ohlc)

# –°–±–æ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
title = f"{symbol} ‚Äî {interval} ‚Ä¢ –¢–∞–π–º–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏–π"
fig = build_chart(
    df=ohlc,
    rules_df=rules_df,
    over_df=over_df,
    show_rules=show_rules,
    show_override=show_override,
    min_conf=float(min_conf),
    title=title,
)

st.plotly_chart(fig, use_container_width=True)

# –≠–∫—Å–ø–æ—Ä—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ HTML; –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
if want_html:
    html_bytes = fig.to_html(full_html=True).encode("utf-8")
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å HTML",
        data=html_bytes,
        file_name=f"{symbol.replace('/', '-')}_{interval}_timeline.html",
        mime="text/html",
    )

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É JSON
with st.expander("–§–æ—Ä–º–∞—Ç JSON –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–ø—Ä–∏–º–µ—Ä)"):
    example = [
        {
            "ts": (pd.Timestamp.utcnow() - pd.Timedelta("1h")).isoformat(),
            "kind": "rules",
            "confidence": 62.5,
            "side": "long",
        },
        {
            "ts": (pd.Timestamp.utcnow() - pd.Timedelta("2h")).isoformat(),
            "kind": "override",
            "confidence": 48.0,
            "side": "short",
        },
    ]
    st.code(json.dumps(example, ensure_ascii=False, indent=2), language="json")
