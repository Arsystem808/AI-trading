# -*- coding: utf-8 -*-
# app.py ‚Äî Arxora UI (final) + Stable DB diagnostics + Polished UI

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏ –≤—ã–∑–æ–≤ ensure_models
try:
    from core.model_fetch import ensure_models
    try:
        ensure_models()  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏ –≤ ARXORA_MODEL_DIR –∏–ª–∏ /tmp/models –¥–æ –ª—é–±—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    except Exception as e:
        import logging as _lg
        _lg.warning("ensure_models failed: %s", e)
except Exception as e:
    import logging as _lg
    _lg.warning("model_fetch import skipped: %s", e)

import os
import re
import sys
import importlib
import traceback
import sqlite3
from pathlib import Path
from datetime import datetime, timezone
from typing import Any, Dict, Optional, List

import streamlit as st

# ===== –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è =====
try:
    from database import TradingDatabase
    db = TradingDatabase()
except Exception as e:
    st.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å database.py: {e}")
    st.stop()

try:
    import pandas as pd
except Exception:
    pd = None

# ===== Paths / Env =====
MODEL_DIR = Path(os.getenv("ARXORA_MODEL_DIR", "/tmp/models"))

# –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ filelock (–±–µ–∑ –ø–∞–¥–µ–Ω–∏—è UI)
try:
    from filelock import FileLock  # pip install filelock
except Exception:
    class FileLock:
        def __init__(self, *a, **k): pass
        def __enter__(self): return self
        def __exit__(self, *a): return False

try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# –î–æ–ø. –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è Polygon (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ ‚Äî –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–∫–∞–∂–µ–º —Ç–∏–∫–µ—Ä)
try:
    import requests
except Exception:
    requests = None

# ===== Page / Branding =====
st.set_page_config(page_title="Arxora ‚Äî —Ç—Ä–µ–π–¥‚Äë–ò–ò (MVP)", page_icon="assets/arxora_favicon_512.png", layout="wide")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π CSS –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
st.markdown("""
<style>
:root{
  --brand:#5B5BF7; 
  --brand-2:#7A7AFB;
  --ink:#0b0f14; 
  --panel:#0e131a; 
  --accent:#FFA94D;
  --ok:#16b397; 
  --danger:#e5484d; 
  --muted:#8b97a7;
}
html, body, [data-testid="stAppViewContainer"]{
  background:#000000;
}
.block-container{
  padding-top: 1.2rem;
  padding-bottom: 2rem;
  max-width: 1200px;
}
.arx-hero{
  border-radius:10px; overflow:hidden;
  box-shadow:0 0 0 1px rgba(255,255,255,.04), 0 14px 40px rgba(0,0,0,.35);
}
.arx-hero-head{
  background:linear-gradient(98deg, var(--brand), var(--brand-2));
  padding:28px 18px;
}
.arx-hero-title{
  font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;
  color:#fff; font-weight:800; letter-spacing:.4px;
  font-size: clamp(34px, 6.6vw, 72px); line-height:1.04;
}
.arx-hero-sub{
  background:#000; padding:10px 18px 16px 18px; color:#fff; opacity:.92;
  font-size: clamp(16px, 2.2vw, 26px);
}
.badge{
  display:inline-flex; align-items:center; gap:.45rem;
  background:#0f1520; color:#c8d1de; border:1px solid rgba(255,255,255,.06);
  border-radius:999px; padding:.35rem .7rem; font-size:.82rem; font-weight:600;
}
.kpi{
  background: #0f1520; border:1px solid rgba(255,255,255,.06);
  border-radius:14px; padding:12px 14px; color:#e7edf6;
}
.kpi .kpi-title{ font-size:.86rem; opacity:.85; }
.kpi .kpi-value{ font-size:1.35rem; font-weight:800; margin-top:2px;}
.kpi.ok{ background:linear-gradient(180deg, #052622, #071a18); }
.kpi.bad{ background:linear-gradient(180deg, #250909, #140808); }
.kpi.brand{ background:linear-gradient(180deg, #0b0e23, #0a0c1a); }
.stTabs [data-baseweb="tab-list"]{
  gap:.5rem;
}
.stTabs [data-baseweb="tab"]{
  background: #0f1520; border:1px solid rgba(255,255,255,.06);
  border-radius: .6rem .6rem 0 0; padding:.5rem .9rem;
}
.stButton > button{
  font-weight:700; letter-spacing:.15px; border-radius:12px;
  border:1px solid rgba(255,255,255,.08) !important;
  background: linear-gradient(98deg, var(--brand), var(--brand-2)) !important;
}
.stButton.danger > button{
  background: linear-gradient(98deg, #c92a2a, #ff6b6b) !important;
}
.card{
  background:#0f1520; border:1px solid rgba(255,255,255,.06);
  border-radius:16px; padding:12px 14px; color:#e7edf6;
}
.card.green{ background:linear-gradient(180deg, #0f2b22, #0c1f19); }
.card.red{ background:linear-gradient(180deg, #2b1111, #1a0c0c); }
.callout{
  background: #0a0f17; border:1px dashed rgba(255,255,255,.18);
  padding:10px 12px; border-radius:12px; color:#cbd5e1;
}
.eq-container{
  background: #0a0f17; border:1px solid rgba(255,255,255,.06);
  border-radius:16px; padding:14px;
}
</style>
""", unsafe_allow_html=True)

def render_arxora_header():
    hero_path = "assets/arxora_logo_hero.png"
    if os.path.exists(hero_path):
        st.image(hero_path, use_container_width=True)
    else:
        st.markdown("""
        <div class="arx-hero">
          <div class="arx-hero-head">
            <div class="arx-hero-title">Arxora</div>
          </div>
          <div class="arx-hero-sub">trade smarter.</div>
        </div>
        """, unsafe_allow_html=True)

# ===== –ù–û–í–û–ï: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î / helper =====
def _user_exists_in_current_db(username: str) -> bool:
    name = (username or "").strip()
    if not name:
        return False
    conn = None
    try:
        conn = sqlite3.connect(db.db_name, timeout=10)
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM users WHERE username = ? COLLATE NOCASE", (name,))
        return cur.fetchone() is not None
    except Exception:
        return False
    finally:
        try:
            if conn:
                conn.close()
        except Exception:
            pass

# ===== –ù–û–í–û–ï: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è =====
def show_auth_page():
    render_arxora_header()

    # –ë–µ–π–¥–∂–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —à–∞–ø–∫–µ –≤—Ö–æ–¥–∞
    c1, c2, c3 = st.columns([1.1, 1, 1.2])
    with c1:
        st.markdown('<span class="badge">üîê Auth ‚Ä¢ Secure</span>', unsafe_allow_html=True)
    with c2:
        try:
            st.markdown(f'<span class="badge">üóÑÔ∏è DB: {Path(db.db_name).resolve()}</span>', unsafe_allow_html=True)
        except Exception:
            st.markdown('<span class="badge">üóÑÔ∏è DB: n/a</span>', unsafe_allow_html=True)
    with c3:
        st.markdown('<span class="badge">‚öôÔ∏è Build: MVP</span>', unsafe_allow_html=True)

    st.title("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])

    with tab1:
        st.subheader("–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="login_username", placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, Arsen")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password", placeholder="–≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
        if st.button("üîë –í–æ–π—Ç–∏", type="primary"):
            user = db.login_user(username, password)
            if user:
                st.session_state.user = user
                st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                st.rerun()
            else:
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                try:
                    st.caption(f"DB: {Path(db.db_name).resolve()}")
                except Exception:
                    pass
                if username:
                    if not _user_exists_in_current_db(username):
                        st.info("–í —ç—Ç–æ–π –±–∞–∑–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                    else:
                        st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ —Ä–∞—Å–∫–ª–∞–¥–∫—É/—Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ).")

    with tab2:
        st.subheader("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="reg_username", placeholder="–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞")
        new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_password", placeholder="–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤")
        initial_capital = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π)", min_value=1000, value=10000, step=1000)

        if st.button("üÜï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", type="primary"):
            if len((new_username or "").strip()) < 3:
                st.error("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
            elif len((new_password or "").strip()) < 6:
                st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                user_id = db.register_user(new_username, new_password, initial_capital)
                if user_id:
                    # –ê–≤—Ç–æ–ª–∏–≥–∏–Ω –≤ —Ç—É –∂–µ –ë–î
                    user = db.login_user(new_username, new_password)
                    if user:
                        st.session_state.user = user
                        st.success("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        st.rerun()
                    else:
                        st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
                else:
                    st.error("‚ùå –≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
if 'user' not in st.session_state:
    show_auth_page()
    st.stop()

# ===== Sidebar: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ =====
user_info = db.get_user_info(st.session_state.user['user_id'])
stats = db.get_statistics(st.session_state.user['user_id'])

with st.sidebar:
    st.markdown(f"### üë§ {user_info['username']}")
    st.markdown('<div class="kpi brand"><div class="kpi-title">–¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª</div>'
                f'<div class="kpi-value">${user_info["current_capital"]:,.2f}</div></div>', unsafe_allow_html=True)
    st.markdown('<div class="kpi"><div class="kpi-title">–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª</div>'
                f'<div class="kpi-value">${user_info["initial_capital"]:,.2f}</div></div>', unsafe_allow_html=True)

    pnl_change = user_info['current_capital'] - user_info['initial_capital']
    pnl_percent = (pnl_change / max(1e-9, user_info['initial_capital'])) * 100
    pnl_cls = "kpi ok" if pnl_change >= 0 else "kpi bad"
    st.markdown(f'<div class="{pnl_cls}"><div class="kpi-title">–û–±—â–∏–π P&L</div>'
                f'<div class="kpi-value">${pnl_change:,.2f} ({pnl_percent:.2f}%)</div></div>', unsafe_allow_html=True)
    st.divider()
    if st.button("üö™ –í—ã–π—Ç–∏"):
        del st.session_state.user
        st.rerun()

    min_confidence_filter = st.slider("–ú–∏–Ω. Confidence –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", 0, 100, 60)

# ===== Header =====
render_arxora_header()

# ===== Optional performance (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) =====
try:
    from core.performance_tracker import log_agent_performance, get_agent_performance
except Exception:
    def log_agent_performance(*args, **kwargs): pass
    def get_agent_performance(*args, **kwargs): return None

# ===== Helpers (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
ENTRY_MARKET_EPS = float(os.getenv("ARXORA_ENTRY_MARKET_EPS", "0.0015"))
MIN_TP_STEP_PCT  = float(os.getenv("ARXORA_MIN_TP_STEP_PCT",  "0.0010"))

def _fmt(x: Any) -> str:
    try: return f"{float(x):.2f}"
    except Exception: return "0.00"

def sanitize_targets(action: str, entry: float, tp1: float, tp2: float, tp3: float):
    step = max(MIN_TP_STEP_PCT * max(1.0, abs(entry)), 1e-6 * max(1.0, abs(entry)))
    if action == "BUY":
        a = sorted([tp1, tp2, tp3]); a[0]=max(a[0], entry+step); a[1]=max(a[1], a[0]+step); a[2]=max(a[2], a[1]+step); return a[0],a[1],a[2]
    if action == "SHORT":
        a = sorted([tp1, tp2, tp3], reverse=True); a[0]=min(a[0], entry-step); a[1]=min(a[1], a[0]-step); a[2]=min(a[2], a[1]-step); return a[0],a[1],a[2]
    return tp1, tp2, tp3

def entry_mode_labels(action: str, entry: float, last_price: float, eps: float):
    if action not in ("BUY", "SHORT"): return "WAIT", "Entry"
    if abs(entry - last_price) <= eps * max(1.0, abs(last_price)): return "Market price", "Entry (Market)"
    if action == "BUY":  return ("Buy Stop","Entry (Buy Stop)") if entry > last_price else ("Buy Limit","Entry (Buy Limit)")
    else:                return ("Sell Stop","Entry (Sell Stop)") if entry < last_price else ("Sell Limit","Entry (Sell Limit)")

def normalize_for_polygon(symbol: str) -> str:
    s = (symbol or "").strip().upper().replace(" ", "")
    if ":" in s:
        head, tail = s.split(":", 1)
        tail = tail.replace("USDT", "USD").replace("USDC", "USD")
        return f"{head}:{tail}"
    if re.match(r"^[A-Z]{2,10}USD(T|C)?$", s or ""):
        s = s.replace("USDT", "USD").replace("USDC", "USD")
        return f"X:{s}"
    return s

def rr_line(levels: Dict[str, float]) -> str:
    risk = abs(levels["entry"] - levels["sl"])
    if risk <= 1e-9: return ""
    rr1 = abs(levels["tp1"] - levels["entry"]) / risk
    rr2 = abs(levels["tp2"] - levels["entry"]) / risk
    rr3 = abs(levels["tp3"] - levels["entry"]) / risk
    return f"RR ‚âà 1:{rr1:.1f} (TP1) ¬∑ 1:{rr2:.1f} (TP2) ¬∑ 1:{rr3:.1f} (TP3)"

def card_html(title: str, value: str, sub: Optional[str]=None, color: Optional[str]=None) -> str:
    cls = "card"
    if color == "green": cls += " green"
    elif color == "red": cls += " red"
    return f"""
        <div class="{cls}">
            <div style="font-size:.9rem; opacity:.85">{title}</div>
            <div style="font-size:1.4rem; font-weight:800; margin-top:4px;">{value}</div>
            {f"<div style='font-size:.8rem; opacity:.72; margin-top:2px;'>{sub}</div>" if sub else ""}
        </div>
    """

@st.cache_data(show_spinner=False, ttl=86400)
def resolve_asset_title_polygon(raw_symbol: str, normalized: str) -> str:
    s = (raw_symbol or "").strip().upper()
    t = (normalized or s).strip().upper()
    api = os.getenv("POLYGON_API_KEY") or os.getenv("POLYGON_KEY")
    if not api or requests is None:
        return s
    try:
        r = requests.get(
            f"https://api.polygon.io/v3/reference/tickers/{t}",
            params={"apiKey": api},
            timeout=2.5,
        )
        if r.ok:
            data = r.json() or {}
            name = ((data.get("results") or {}).get("name") or "").strip()
            if name:
                return f"{name} ({s})"
    except Exception:
        pass
    return s

try:
    import services.data  # noqa
except Exception:
    try:
        import core.data as _core_data
        sys.modules['services.data'] = _core_data
    except Exception:
        pass

def _load_strategy_module():
    try:
        mod = importlib.import_module("core.strategy")
        try:
            mod = importlib.reload(mod)
        except Exception:
            pass
        return mod, None
    except Exception:
        return None, traceback.format_exc()

def get_available_models() -> List[str]:
    mod, _ = _load_strategy_module()
    if not mod: return ["Octopus"]
    reg = getattr(mod, "STRATEGY_REGISTRY", {}) or {}
    keys = list(reg.keys())
    return (["Octopus"] if "Octopus" in keys else []) + [k for k in sorted(keys) if k != "Octopus"]

def run_model_by_name(ticker_norm: str, model_name: str) -> Dict[str, Any]:
    mod, err = _load_strategy_module()
    if not mod:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å core.strategy:\n" + (err or ""))
    if hasattr(mod, "analyze_asset"):
        return mod.analyze_asset(ticker_norm, "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π", model_name)
    reg = getattr(mod, "STRATEGY_REGISTRY", {}) or {}
    if model_name in reg and callable(reg[model_name]):
        return reg[model_name](ticker_norm, "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π")
    fname = f"analyze_asset_{model_name.lower()}"
    if hasattr(mod, fname):
        return getattr(mod, fname)(ticker_norm, "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π")
    raise RuntimeError(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

def render_confidence_breakdown_inline(ticker: str, conf_pct: float):
    try:
        overall = float(conf_pct or 0.0)
    except Exception:
        overall = 0.0
    st.session_state["last_overall_conf_pct"] = overall
    rules_pct = float(st.session_state.get("last_rules_pct", 44.0))
    ai_delta = overall - rules_pct
    ai_pct = max(0.0, min(overall, ai_delta))
    sign = "‚àí" if ai_delta < 0 else ""
    WIDTH = 28
    filled = int(round(WIDTH * (overall / 100.0))) if overall > 0 else 0
    ai_chars = int(round(filled * (ai_pct / overall))) if overall > 0 else 0
    rules_chars = max(0, filled - ai_chars)
    empty_chars = max(0, WIDTH - filled)
    bar = "[" + ("‚ñë" * rules_chars) + ("‚ñà" * ai_chars) + ("¬∑" * empty_chars) + "]"
    html = f"""
    <div style="background:#0a0f17;color:#e7edf6;border-radius:12px;padding:10px 12px;
                border:1px solid rgba(255,255,255,.06);
                font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', monospace;">
      <div>–û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {overall:.0f}%</div>
      <div>‚îî AI override: {sign}{ai_pct:.0f}% {bar}</div>
    </div>
    """
    st.markdown(html, unsafe_allow_html=True)

# ===== –í–ö–õ–ê–î–ö–ò: –°–∏–≥–Ω–∞–ª—ã + –ü–æ—Ä—Ç—Ñ–µ–ª—å + –ê–∫—Ç–∏–≤–Ω—ã–µ + –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
tab_signals, tab_portfolio, tab_active, tab_stats = st.tabs([
    "üéØ AI –°–∏–≥–Ω–∞–ª—ã", 
    "üìã –ü–æ—Ä—Ç—Ñ–µ–ª—å", 
    "üíº –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏",
    "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
])

# ===== TAB 1: AI –°–ò–ì–ù–ê–õ–´ =====
with tab_signals:
    st.subheader("AI agents")
    models = get_available_models() or ["Octopus"]
    model = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", options=models, index=0, horizontal=False, key="agent_radio")

    ticker_input = st.text_input("–¢–∏–∫–µ—Ä", placeholder="–ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞: AAPL ‚Ä¢ SPY ‚Ä¢ BTCUSD ‚Ä¢ C:EURUSD")
    ticker = ticker_input.strip().upper()
    symbol_for_engine = normalize_for_polygon(ticker)

    col_run, col_hint = st.columns([1,2])
    with col_run:
        run = st.button("‚ö° –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", key="main_analyze")
    with col_hint:
        st.caption(f"Mode: AI ¬∑ Model: {model}")

    if run and ticker:
        try:
            out = run_model_by_name(symbol_for_engine, model)

            rec = out.get("recommendation")
            if not rec and ("action" in out or "confidence" in out):
                rec = {"action": out.get("action","WAIT"), "confidence": float(out.get("confidence",0.0))}
            if not rec:
                rec = {"action":"WAIT","confidence":0.0}

            action = str(rec.get("action","WAIT"))
            conf_val = float(rec.get("confidence",0.0))
            conf_pct_val = conf_val*100.0 if conf_val <= 1.0 else conf_val
            st.session_state["last_overall_conf_pct"] = conf_pct_val
            st.session_state["last_signal"] = {
                "ticker": ticker,
                "symbol_for_engine": symbol_for_engine,
                "action": action,
                "confidence": conf_pct_val,
                "model": model,
                "output": out
            }

            last_price = float(out.get("last_price", 0.0) or 0.0)

            asset_title = resolve_asset_title_polygon(ticker, symbol_for_engine)
            st.markdown(
                f"<div style='text-align:center; font-weight:900; letter-spacing:.2px; "
                f"font-size:clamp(20px,3.6vw,34px); margin-top:4px;'>{asset_title}</div>",
                unsafe_allow_html=True
            )
            st.markdown(
                f"<div style='font-size:3rem; font-weight:900; text-align:center; margin:6px 0 14px 0;'>"
                f"${last_price:.2f}</div>",
                unsafe_allow_html=True
            )

            lv = {k: float(out.get("levels", {}).get(k, 0.0)) for k in ("entry","sl","tp1","tp2","tp3")}
            if action in ("BUY", "SHORT"):
                tp1, tp2, tp3 = lv["tp1"], lv["tp2"], lv["tp3"]
                t1, t2, t3 = sanitize_targets(action, lv["entry"], tp1, tp2, tp3)
                lv["tp1"], lv["tp2"], lv["tp3"] = float(t1), float(t2), float(t3)

            mode_text, entry_title = entry_mode_labels(action, lv.get("entry", last_price), last_price, ENTRY_MARKET_EPS)
            header_text = "WAIT"
            if action == "BUY": header_text = f"üü¢ Long ‚Ä¢ {mode_text}"
            elif action == "SHORT": header_text = f"üî¥ Short ‚Ä¢ {mode_text}"

            st.markdown(f"""
            <div style="background:linear-gradient(98deg, #c57b0a, #f0a64a); padding:14px 16px; border-radius:16px; 
                        border:1px solid rgba(255,255,255,0.08); margin-bottom:10px; color:#0b0f14;">
                <div style="font-size:1.15rem; font-weight:800;">{header_text}</div>
                <div style="opacity:0.88; font-size:0.95rem; margin-top:2px;">{int(round(conf_pct_val))}% confidence</div>
            </div>
            """, unsafe_allow_html=True)

            now_utc = datetime.now(timezone.utc)
            eod_utc = now_utc.replace(hour=23, minute=59, second=59, microsecond=0)
            st.caption(f"As‚Äëof: {now_utc.strftime('%Y-%m-%dT%H:%M:%SZ')} UTC ‚Ä¢ Valid until: {eod_utc.strftime('%Y-%m-%dT%H:%M:%SZ')} ‚Ä¢ Model: {model}")

            render_confidence_breakdown_inline(ticker, conf_pct_val)

            if action in ("BUY", "SHORT"):
                c1, c2, c3 = st.columns(3)
                with c1: st.markdown(card_html(entry_title, f"{lv['entry']:.2f}", color="green"), unsafe_allow_html=True)
                with c2: st.markdown(card_html("Stop Loss", f"{lv['sl']:.2f}", color="red"), unsafe_allow_html=True)
                with c3: st.markdown(card_html("TP 1", f"{lv['tp1']:.2f}", sub=f"Probability {int(round(out.get('probs', {}).get('tp1', 0)*100))}%"), unsafe_allow_html=True)
                c4, c5 = st.columns(2)
                with c4: st.markdown(card_html("TP 2", f"{lv['tp2']:.2f}", sub=f"Probability {int(round(out.get('probs', {}).get('tp2', 0)*100))}%"), unsafe_allow_html=True)
                with c5: st.markdown(card_html("TP 3", f"{lv['tp3']:.2f}", sub=f"Probability {int(round(out.get('probs', {}).get('tp3', 0)*100))}%"), unsafe_allow_html=True)
                rr = rr_line(lv)
                if rr:
                    st.markdown(f"<div style='margin-top:6px; color:{'#FFA94D'}; font-weight:700;'>{rr}</div>", unsafe_allow_html=True)

            CUSTOM_PHRASES = {
                "CONTEXT": {
                    "support":["–¶–µ–Ω–∞ —É —É—Ä–æ–≤–Ω—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ ‚Äî –≤—Ö–æ–¥ –ø–æ –æ—Ä–¥–µ—Ä—É –∏–∑ AI‚Äë–∞–Ω–∞–ª–∏–∑–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ä–æ—Å—Ç; –≤–∞–∂–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –Ω–∏–∂–µ –∑–æ–Ω—ã."],
                    "resistance":["–†–∏—Å–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ–≤—ã—à–µ–Ω. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ –æ—Ä–¥–µ—Ä—É –∏–∑ AI‚Äë–∞–Ω–∞–ª–∏–∑–∞; –ø—Ä–∏ –ø—Ä–æ—Ä—ã–≤–µ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ –≤—ã—à–µ –∑–æ–Ω—ã ‚Äî –ø–ª–∞–Ω –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å."],
                    "neutral":["–ë–∞–ª–∞–Ω—Å. –î–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É."]
                },
                "STOPLINE":["–°—Ç–æ–ø‚Äë–ª–æ—Å—Å: {sl}. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ ~{risk_pct}% –æ—Ç –≤—Ö–æ–¥–∞."],
                "DISCLAIMER":"AI‚Äë–∞–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π; —Ä—ã–Ω–æ–∫ –º–µ–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ—à–ª—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –±—É–¥—É—â–∏–µ."
            }
            ctx_key = "support" if action == "BUY" else ("resistance" if action == "SHORT" else "neutral")
            st.markdown(f"<div class='callout'>{CUSTOM_PHRASES['CONTEXT'][ctx_key][0]}</div>", unsafe_allow_html=True)
            if action in ("BUY", "SHORT"):
                stopline = CUSTOM_PHRASES["STOPLINE"][0].format(sl=_fmt(lv["sl"]), risk_pct=f"{abs(lv['entry']-lv['sl'])/max(1e-9,abs(lv['entry']))*100.0:.1f}")
                st.markdown(f"<div style='opacity:.9; margin-top:4px'>{stopline}</div>", unsafe_allow_html=True)
            st.caption(CUSTOM_PHRASES["DISCLAIMER"])

            try:
                log_agent_performance(model, ticker, datetime.today(), 0.0)
            except Exception:
                pass

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            st.exception(e)

    elif not ticker:
        st.info("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª. –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.")

# ===== TAB 2: –ü–û–†–¢–§–ï–õ–¨ =====
with tab_portfolio:
    st.header("üìã –î–æ–±–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å")
    if "last_signal" in st.session_state:
        sig = st.session_state["last_signal"]
        ticker = sig["ticker"]; action = sig["action"]; conf = sig["confidence"]; out = sig["output"]

        if action not in ("BUY", "SHORT"):
            st.warning("‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª ‚Äî WAIT. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        elif not db.can_add_trade(st.session_state.user['user_id'], ticker):
            st.warning(f"‚ö†Ô∏è –ü–æ {ticker} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞! –ó–∞–∫—Ä–æ–π—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π.")
        else:
            st.success(f"‚úÖ –°–∏–≥–Ω–∞–ª: {ticker} ‚Äî {action} (Confidence: {conf:.0f}%)")

            lv = {k: float(out.get("levels", {}).get(k, 0.0)) for k in ("entry","sl","tp1","tp2","tp3")}

            cA, cB, cC, cD, cE = st.columns(5)
            cA.markdown(card_html("Entry", f"${lv['entry']:.2f}", color="green"), unsafe_allow_html=True)
            cB.markdown(card_html("Stop Loss", f"${lv['sl']:.2f}", color="red"), unsafe_allow_html=True)
            cC.markdown(card_html("TP1 (30%)", f"${lv['tp1']:.2f}"), unsafe_allow_html=True)
            cD.markdown(card_html("TP2 (30%)", f"${lv['tp2']:.2f}"), unsafe_allow_html=True)
            cE.markdown(card_html("TP3 (40%)", f"${lv['tp3']:.2f}"), unsafe_allow_html=True)

            position_percent = st.slider("–î–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏, %", min_value=5, max_value=50, value=10, step=5)
            position_size = (user_info['current_capital'] * position_percent) / 100
            st.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: **${position_size:,.2f}** ({position_percent}% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞)")

            potential_profit = position_size * abs(lv['tp1'] - lv['entry']) / max(1e-9, abs(lv['entry']))
            potential_loss = position_size * abs(lv['entry'] - lv['sl']) / max(1e-9, abs(lv['entry']))

            col1, col2 = st.columns(2)
            col1.success(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (TP1): **${potential_profit:.2f}**")
            col2.error(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ (SL): **${potential_loss:.2f}**")

            if conf < min_confidence_filter:
                st.warning(f"‚ö†Ô∏è Confidence ({conf:.0f}%) –Ω–∏–∂–µ —Ñ–∏–ª—å—Ç—Ä–∞ ({min_confidence_filter}%). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å.")

            if st.button("‚ûï –î–û–ë–ê–í–ò–¢–¨ –í –ü–û–†–¢–§–ï–õ–¨", type="primary", use_container_width=True):
                try:
                    signal_data = {
                        'ticker': ticker,
                        'direction': 'LONG' if action == 'BUY' else 'SHORT',
                        'entry_price': lv['entry'],
                        'stop_loss': lv['sl'],
                        'tp1': lv['tp1'],
                        'tp2': lv['tp2'],
                        'tp3': lv['tp3'],
                        'tp1_prob': float(out.get('probs', {}).get('tp1', 0) * 100),
                        'tp2_prob': float(out.get('probs', {}).get('tp2', 0) * 100),
                        'tp3_prob': float(out.get('probs', {}).get('tp3', 0) * 100),
                        'confidence': int(conf),
                        'model': sig['model']
                    }
                    trade_id = db.add_trade(st.session_state.user['user_id'], signal_data, position_percent)
                    st.success(f"üéâ –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å! Trade ID: #{trade_id}")
                    st.balloons()
                    del st.session_state["last_signal"]
                    st.rerun()
                except ValueError as e:
                    st.error(str(e))
    else:
        st.info("üìä –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç–∏–∫–µ—Ä –≤–æ –≤–∫–ª–∞–¥–∫–µ 'AI –°–∏–≥–Ω–∞–ª—ã', –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ —Å–∏–≥–Ω–∞–ª –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å –∑–¥–µ—Å—å.")

# ===== TAB 3: –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò =====
with tab_active:
    st.header("üíº –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏")
    active_trades = db.get_active_trades(st.session_state.user['user_id'])

    if not active_trades:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –î–æ–±–∞–≤—å—Ç–µ —Å–∏–≥–Ω–∞–ª –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ü–æ—Ä—Ç—Ñ–µ–ª—å'!")
    else:
        for trade in active_trades:
            sl_status = "–ë–µ–∑—É–±—ã—Ç–æ–∫" if trade['sl_breakeven'] else f"${trade['stop_loss']:.2f}"
            with st.expander(f"üîπ {trade['ticker']} ‚Äî {trade['direction']} | –û—Å—Ç–∞—Ç–æ–∫: {trade['remaining_percent']:.0f}% | SL: {sl_status}"):
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Entry", f"${trade['entry_price']:.2f}")
                    st.metric("Position", f"${trade['position_size']:.2f}")
                with col2:
                    st.metric("Model", trade['model_used'])
                    st.metric("Confidence", f"{trade['confidence']}%")
                with col3:
                    st.write("**Progress:**")
                    st.write(f"TP1: {'‚úÖ' if trade['tp1_closed'] else '‚è≥'} (30%)")
                    st.write(f"TP2: {'‚úÖ' if trade['tp2_closed'] else '‚è≥'} (30%)")
                    st.write(f"TP3: {'‚úÖ' if trade['tp3_closed'] else '‚è≥'} (40%)")

                st.divider()
                current_price = st.number_input(
                    "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è)",
                    value=float(trade['entry_price']),
                    key=f"price_{trade['trade_id']}"
                )

                # –õ–æ–≥–∏–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ/–ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                if trade['direction'] == 'LONG':
                    if not trade['tp1_closed'] and current_price >= trade['take_profit_1']:
                        st.success("üéØ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞–∫—Ä—ã—Ç—å 30% + –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫?")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å TP1", key=f"tp1_{trade['trade_id']}"):
                            db.partial_close_trade(trade['trade_id'], current_price, 'tp1'); st.rerun()
                    elif trade['tp1_closed'] and not trade['tp2_closed'] and current_price >= trade['take_profit_2']:
                        st.success("üéØ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞–∫—Ä—ã—Ç—å –µ—â—ë 30%?")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å TP2", key=f"tp2_{trade['trade_id']}"):
                            db.partial_close_trade(trade['trade_id'], current_price, 'tp2'); st.rerun()
                    elif trade['tp2_closed'] and not trade['tp3_closed'] and current_price >= trade['take_profit_3']:
                        st.success("üéØ TP3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞–∫—Ä—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ (40%)?")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å TP3", key=f"tp3_{trade['trade_id']}"):
                            db.partial_close_trade(trade['trade_id'], current_price, 'tp3'); st.rerun()
                    elif (trade['sl_breakeven'] and current_price <= trade['entry_price']) or \
                         (not trade['sl_breakeven'] and current_price <= trade['stop_loss']):
                        st.error("‚ö†Ô∏è Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª!")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å –ø–æ SL", key=f"sl_{trade['trade_id']}"):
                            db.full_close_trade(trade['trade_id'], current_price, "SL_HIT"); st.rerun()
                elif trade['direction'] == 'SHORT':
                    if not trade['tp1_closed'] and current_price <= trade['take_profit_1']:
                        st.success("üéØ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞–∫—Ä—ã—Ç—å 30% + –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ SL –≤ –±–µ–∑—É–±—ã—Ç–æ–∫?")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å TP1", key=f"tp1_{trade['trade_id']}"):
                            db.partial_close_trade(trade['trade_id'], current_price, 'tp1'); st.rerun()
                    elif trade['tp1_closed'] and not trade['tp2_closed'] and current_price <= trade['take_profit_2']:
                        st.success("üéØ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞–∫—Ä—ã—Ç—å –µ—â—ë 30%?")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å TP2", key=f"tp2_{trade['trade_id']}"):
                            db.partial_close_trade(trade['trade_id'], current_price, 'tp2'); st.rerun()
                    elif trade['tp2_closed'] and not trade['tp3_closed'] and current_price <= trade['take_profit_3']:
                        st.success("üéØ TP3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞–∫—Ä—ã—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ (40%)?")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å TP3", key=f"tp3_{trade['trade_id']}"):
                            db.partial_close_trade(trade['trade_id'], current_price, 'tp3'); st.rerun()
                    elif (trade['sl_breakeven'] and current_price >= trade['entry_price']) or \
                         (not trade['sl_breakeven'] and current_price >= trade['stop_loss']):
                        st.error("‚ö†Ô∏è Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª!")
                        if st.button("–ó–∞–∫—Ä—ã—Ç—å –ø–æ SL", key=f"sl_{trade['trade_id']}"):
                            db.full_close_trade(trade['trade_id'], current_price, "SL_HIT"); st.rerun()

                if st.button("üî¥ –ó–∞–∫—Ä—ã—Ç—å –≤—Å—é –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é", key=f"manual_{trade['trade_id']}"):
                    db.full_close_trade(trade['trade_id'], current_price, "MANUAL"); st.rerun()

# ===== TAB 4: –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
with tab_stats:
    st.header("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

    c1, c2, c3, c4 = st.columns(4)
    c1.markdown(f'<div class="kpi"><div class="kpi-title">–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</div><div class="kpi-value">{stats["total_trades"]}</div></div>', unsafe_allow_html=True)
    c2.markdown(f'<div class="kpi"><div class="kpi-title">Win Rate</div><div class="kpi-value">{stats["win_rate"]:.1f}%</div></div>', unsafe_allow_html=True)
    c3.markdown(f'<div class="kpi"><div class="kpi-title">–ó–∞–∫—Ä—ã—Ç–æ</div><div class="kpi-value">{stats["closed_trades"]}</div></div>', unsafe_allow_html=True)
    c4.markdown(f'<div class="kpi"><div class="kpi-title">–°—Ä–µ–¥–Ω–∏–π P&L</div><div class="kpi-value">{stats["avg_pnl"]:.2f}%</div></div>', unsafe_allow_html=True)

    closed_trades = db.get_closed_trades(st.session_state.user['user_id'])
    if closed_trades and pd:
        df = pd.DataFrame(closed_trades)
        df['cumulative_pnl'] = df['total_pnl_dollars'].cumsum()
        df['equity'] = user_info['initial_capital'] + df['cumulative_pnl']

        st.subheader("Equity Curve")
        st.markdown('<div class="eq-container">', unsafe_allow_html=True)
        st.line_chart(df.set_index('close_date')['equity'])
        st.markdown('</div>', unsafe_allow_html=True)

        st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
        st.dataframe(
            df[[
                'ticker', 'direction', 'entry_price', 'close_price',
                'close_reason', 'total_pnl_percent', 'total_pnl_dollars', 'close_date'
            ]].style.format({
                'entry_price': '${:.2f}',
                'close_price': '${:.2f}',
                'total_pnl_percent': '{:.2f}%',
                'total_pnl_dollars': '${:.2f}'
            }),
            use_container_width=True
        )
    else:
        st.info("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞. –ó–∞–∫—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–¥–µ–ª–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# ===== Footer / About =====
st.markdown("---")
st.markdown("<style>.stButton > button { font-weight: 700; }</style>", unsafe_allow_html=True)
st.markdown(
    """
    <div style="background-color: #000000; color: #ffffff; padding: 15px; border-radius: 10px; margin-top: 6px;">
        <h4 style="font-weight: 700; margin-top: 0;">–û –ø—Ä–æ–µ–∫—Ç–µ</h4>
        <p style="font-weight: 300; margin-bottom: 0;">
        Arxora ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        —Å –ø–æ–º–æ—â—å—é –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑, –ø–æ–≤—ã—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤
        –∏ –ø–æ–º–æ–≥–∞–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∏—Å–∫–∞–º–∏. –ù–µ—Å–∫–æ–ª—å–∫–æ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏: —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∏ –∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. 
        Octopus-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∑–≤–µ—à–∏–≤–∞–µ—Ç –º–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–¥–∞–µ—Ç –µ–¥–∏–Ω—ã–π –ø–ª–∞–Ω —Å–¥–µ–ª–∫–∏. 
        AI Override ‚Äî —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç—É –±–∞–∑–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –º–æ–º–µ–Ω—Ç—ã, –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –≤–µ–¥—ë—Ç —Å–µ–±—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ.
        </p>
    </div>
    """,
    unsafe_allow_html=True
)
