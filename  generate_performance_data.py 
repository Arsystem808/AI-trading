#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ Streamlit.
–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª—ã performance_data/performance_{agent}_{ticker}.csv
–∏ —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É performance_summary.csv
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
DATA_DIR = Path("performance_data")
SUMMARY_FILE = Path("performance_summary.csv")

agents = ["Octopus", "W7", "M7", "Global", "AlphaPulse"]
tickers = ["SPY", "QQQ", "BTCUSD", "ETHUSD"]
days = 90  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞

print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n")

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É
DATA_DIR.mkdir(exist_ok=True)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤–æ–¥–∫–∏
all_dfs = []

# ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• =====
for agent in agents:
    for ticker in tickers:
        # –î–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º seed –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        np.random.seed(hash(f"{agent}{ticker}") % 100000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Å —Ä–∞–∑–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if agent == "Octopus":
            # Octopus ‚Äî –ª—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            daily_returns = np.random.normal(0.003, 0.012, len(dates))
        elif agent == "AlphaPulse":
            # AlphaPulse ‚Äî –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            daily_returns = np.random.normal(0.002, 0.020, len(dates))
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã ‚Äî —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            daily_returns = np.random.normal(0.0015, 0.015, len(dates))
        
        # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        cumulative = (1 + pd.Series(daily_returns)).cumprod() - 1.0
        
        # –°–æ–∑–¥–∞—ë–º DataFrame
        df = pd.DataFrame({
            'date': dates.strftime('%Y-%m-%d'),
            'agent': agent,
            'ticker': ticker,
            'daily_return': daily_returns,
            'cumulative_return': cumulative.values
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        filename = DATA_DIR / f"performance_{agent}_{ticker}.csv"
        df.to_csv(filename, index=False)
        print(f"‚úÖ {filename}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–≤–æ–¥–∫—É
        all_dfs.append(df)

print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {len(agents) * len(tickers)} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")

# ===== –°–û–ó–î–ê–ù–ò–ï –°–í–û–î–ö–ò =====
print("\nüìä –°–æ–∑–¥–∞—é —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É performance_summary.csv...")

summary = pd.concat(all_dfs, ignore_index=True)
summary.to_csv(SUMMARY_FILE, index=False)

print(f"‚úÖ {SUMMARY_FILE} —Å–æ–∑–¥–∞–Ω ({len(summary)} —Å—Ç—Ä–æ–∫)!")

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(f"   ‚Ä¢ –ê–≥–µ–Ω—Ç—ã: {', '.join(agents)}")
print(f"   ‚Ä¢ –¢–∏–∫–µ—Ä—ã: {', '.join(tickers)}")
print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π ({start_date.strftime('%Y-%m-%d')} ‚Üí {end_date.strftime('%Y-%m-%d')})")
print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(summary)}")

print("\n‚ú® –°—Ä–µ–¥–Ω—è—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ –∞–≥–µ–Ω—Ç–∞–º:")
for agent in agents:
    agent_data = summary[summary['agent'] == agent]
    avg_return = agent_data['cumulative_return'].mean() * 100
    print(f"   ‚Ä¢ {agent:12s}: {avg_return:+.2f}%")

print("\nüöÄ –ì–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å–∫–∞–π: streamlit run app.py")
