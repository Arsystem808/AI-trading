name: Nightly Training

on:
  schedule:
    - cron: "0 2 * * *"   # каждый день в 02:00 UTC
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: nightly-training-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false   # не отменять длительные тренировки

jobs:
  train:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write
    env:
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
      SYMBOLS: "BTCUSD ETHUSD"
      START_DATE: "2019-01-01"
      EPOCHS: "12"
      # Параметры публикации в Hugging Face Hub:
      HF_TOKEN: ${{ secrets.HF_TOKEN }}      # добавьте секрет в Settings → Secrets and variables → Actions
      HF_REPO:  ${{ vars.HF_REPO }}          # например: org-or-user/nightly-models (добавьте как Repository variable)
      HF_PRIVATE: "true"                     # приватный репозиторий на Hub

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check merge-conflict markers
        shell: bash
        run: |
          # Ищем реальные маркеры конфликтов только в начале строки
          if git grep -nE '^(<<<<<<<|=======|>>>>>>>)' -- . >/dev/null; then
            echo "Unresolved merge markers found"
            git grep -nE '^(<<<<<<<|=======|>>>>>>>)' -- . || true
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            **/requirements*.txt

      - name: Install deps
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pandas numpy scikit-learn joblib requests

      - name: Set END_DATE (UTC today)
        shell: bash
        run: |
          echo "END_DATE=$(date -u +%F)" >> "$GITHUB_ENV"

      - name: Train M7 (all symbols)
        shell: bash
        env:
          CI_DRY_RUN: "0"
        run: |
          set -euo pipefail
          IFS=' ' read -r -a ARR <<< "$SYMBOLS"
          for SYM in "${ARR[@]}"; do
            echo "=== Train for ${SYM} ==="
            python scripts/train.py \
              --symbol "${SYM}" \
              --start  "${START_DATE}" \
              --end    "${END_DATE}" \
              --epochs "${EPOCHS}" \
              --artifacts-dir "artifacts/${SYM}" \
              --models-dir    "models" \
              --configs-dir   "configs"
          done

      - name: Calibrate confidence
        shell: bash
        run: |
          python scripts/calibrate_confidence.py

      - name: Train Octopus meta (optional)
        shell: bash
        run: |
          python scripts/train_octopus_meta.py || echo "meta optional"

      - name: Sanitize filenames (no colons)
        shell: bash
        run: |
          for dir in models artifacts; do
            if [ -d "$dir" ]; then
              find "$dir" -type f -name '*:*' -print0 | while IFS= read -r -d '' f; do
                nf="${f//:/_}"
                mkdir -p "$(dirname "$nf")"
                mv "$f" "$nf"
              done
            fi
          done

      # Публикация весов в Hugging Face Hub
      - name: Install huggingface_hub
        if: ${{ env.HF_TOKEN != '' }}
        run: |
          python -m pip install -U huggingface_hub

      - name: Publish models to Hugging Face Hub
        if: ${{ env.HF_TOKEN != '' }}
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        shell: bash
        run: |
          python - <<'PY'
          import os, sys, pathlib
          from huggingface_hub import HfApi
          token = os.environ.get("HF_TOKEN")
          if not token:
              print("HF_TOKEN is not set; skipping publish")
              sys.exit(0)

          # Определяем repo_id: берём из HF_REPO, иначе <owner>/nightly-models
          repo_id = os.environ.get("HF_REPO")
          if not repo_id:
              owner = os.environ.get("GITHUB_REPOSITORY","_/_").split("/")[0]
              repo_id = f"{owner}/nightly-models"

          private  = os.environ.get("HF_PRIVATE","true").lower() in ("1","true","yes")
          revision = os.environ.get("END_DATE","latest")

          if not pathlib.Path("models").exists():
              print("No 'models' directory; nothing to publish")
              sys.exit(0)

          api = HfApi(token=token)
          api.create_repo(repo_id=repo_id, repo_type="model", private=private, exist_ok=True)
          api.upload_folder(
              folder_path="models",
              repo_id=repo_id,
              repo_type="model",
              commit_message=f"nightly publish: {revision}",
              revision=revision
          )
          if pathlib.Path("configs/calibration.json").exists():
              api.upload_file(
                  path_or_fileobj="configs/calibration.json",
                  path_in_repo="configs/calibration.json",
                  repo_id=repo_id,
                  repo_type="model",
                  commit_message=f"calibration: {revision}",
                  revision=revision
              )
          print(f"Published to hf.co/{repo_id}@{revision}")
          PY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: models-and-calibration
          path: |
            models/**
            configs/**/*.json
            artifacts/**
          if-no-files-found: warn
          retention-days: 7
