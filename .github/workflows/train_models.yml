name: Nightly Training

on:
  schedule:
    - cron: "0 2 * * *"   # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00 UTC (05:00 MSK)
  workflow_dispatch:      # –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –≤—Ä—É—á–Ω—É—é

permissions:
  contents: write         # ‚úÖ –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–æ–≤

concurrency:
  group: nightly-training-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false   # –Ω–µ –æ—Ç–º–µ–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

jobs:
  train:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # –¥–ª—è GitHub Releases
      actions: read
      id-token: write
    
    env:
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
      SYMBOLS: "AAPL SPY BTCUSD ETHUSD QQQ TLT TSLA"
      START_DATE: "2019-01-01"
      EPOCHS: "12"
      
      # Hugging Face (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      HF_REPO: ${{ vars.HF_REPO }}
      HF_PRIVATE: "true"

    steps:
      # ========================================
      # 1. Setup
      # ========================================
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check merge conflicts
        shell: bash
        run: |
          if git grep -nE '^(<<<<<<<|=======|>>>>>>>)' -- . >/dev/null 2>&1; then
            echo "‚ùå Unresolved merge markers found:"
            git grep -nE '^(<<<<<<<|=======|>>>>>>>)' -- .
            exit 1
          fi
          echo "‚úÖ No merge conflicts"

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install huggingface_hub  # –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

      - name: Set END_DATE (UTC today)
        shell: bash
        run: |
          echo "END_DATE=$(date -u +%Y-%m-%d)" >> "$GITHUB_ENV"
          echo "RUN_DATE=$(date -u +%Y%m%d_%H%M%S)" >> "$GITHUB_ENV"

      # ========================================
      # 2. Training
      # ========================================
      - name: Train models (all symbols)
        shell: bash
        env:
          CI_DRY_RUN: "0"
        run: |
          set -euo pipefail
          IFS=' ' read -r -a SYMBOLS_ARR <<< "$SYMBOLS"
          
          for SYMBOL in "${SYMBOLS_ARR[@]}"; do
            echo "========================================="
            echo "Training: ${SYMBOL}"
            echo "========================================="
            
            python scripts/train.py \
              --symbol "${SYMBOL}" \
              --start "${START_DATE}" \
              --end "${END_DATE}" \
              --epochs "${EPOCHS}" \
              --artifacts-dir "artifacts/${SYMBOL}" \
              --models-dir "models" \
              --configs-dir "configs" \
              || echo "‚ö†Ô∏è  Training failed for ${SYMBOL}, continuing..."
          done

      - name: Calibrate confidence
        shell: bash
        run: |
          python scripts/calibrate_confidence.py || echo "‚ö†Ô∏è  Calibration failed"

      - name: Train Octopus meta-model
        shell: bash
        run: |
          python scripts/train_octopus_meta.py || echo "‚ö†Ô∏è  Octopus training failed"

      - name: Sanitize filenames
        shell: bash
        run: |
          for dir in models artifacts configs; do
            if [ -d "$dir" ]; then
              find "$dir" -type f -name '*:*' -print0 2>/dev/null | while IFS= read -r -d '' file; do
                new_file="${file//:/_}"
                mkdir -p "$(dirname "$new_file")"
                mv "$file" "$new_file"
                echo "Renamed: $file ‚Üí $new_file"
              done
            fi
          done

      # ========================================
      # 3. Package Models
      # ========================================
      - name: Package models
        shell: bash
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ models —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if [ ! -d "models" ]; then
            echo "‚ö†Ô∏è  No models directory found"
            mkdir -p models
            echo "dummy" > models/placeholder.txt
          fi
          
          # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º models + configs
          tar -czf models-${RUN_DATE}.tar.gz models/ configs/ || tar -czf models-${RUN_DATE}.tar.gz models/
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
          ls -lh models-${RUN_DATE}.tar.gz
          
          # –°–æ–∑–¥–∞–µ–º checksums
          sha256sum models-${RUN_DATE}.tar.gz > models-${RUN_DATE}.tar.gz.sha256

      # ========================================
      # 4. Create GitHub Release ‚¨ÖÔ∏è –ù–û–í–´–ô –®–ê–ì
      # ========================================
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: models-${{ env.RUN_DATE }}
          name: "ü§ñ Models ${{ env.END_DATE }}"
          body: |
            ## üéØ Nightly Training Results
            
            **Training Date**: ${{ env.END_DATE }}  
            **Run Date**: ${{ env.RUN_DATE }}  
            **Symbols**: ${{ env.SYMBOLS }}  
            **Epochs**: ${{ env.EPOCHS }}  
            
            ### üì¶ Download
            ```
            # Download latest release
            gh release download models-${{ env.RUN_DATE }} -R ${{ github.repository }}
            
            # Or with curl
            curl -L https://github.com/${{ github.repository }}/releases/download/models-${{ env.RUN_DATE }}/models-${{ env.RUN_DATE }}.tar.gz -o models.tar.gz
            
            # Extract
            tar -xzf models-${{ env.RUN_DATE }}.tar.gz
            ```
            
            ### üìä Contents
            - M7 models for all symbols
            - Confidence calibration data
            - Octopus meta-model (if trained)
            
            ### ‚úÖ Verification
            ```
            sha256sum -c models-${{ env.RUN_DATE }}.tar.gz.sha256
            ```
          files: |
            models-${{ env.RUN_DATE }}.tar.gz
            models-${{ env.RUN_DATE }}.tar.gz.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ========================================
      # 5. Publish to Hugging Face (optional)
      # ========================================
      - name: Publish to Hugging Face Hub
        if: ${{ env.HF_TOKEN != '' }}
        shell: bash
        run: |
          python - <<'PYTHON_SCRIPT'
          import os, sys, pathlib
          from huggingface_hub import HfApi
          
          token = os.environ.get("HF_TOKEN")
          if not token:
              print("‚ö†Ô∏è  HF_TOKEN not set, skipping")
              sys.exit(0)
          
          repo_id = os.environ.get("HF_REPO")
          if not repo_id:
              owner = os.environ.get("GITHUB_REPOSITORY", "_/_").split("/")[0]
              repo_id = f"{owner}/ai-trading-models"
          
          private = os.environ.get("HF_PRIVATE", "true").lower() in ("1", "true", "yes")
          revision = os.environ.get("END_DATE", "main")
          
          if not pathlib.Path("models").exists():
              print("‚ö†Ô∏è  No 'models' directory found")
              sys.exit(0)
          
          print(f"üì§ Uploading to hf.co/{repo_id}@{revision}")
          
          api = HfApi(token=token)
          api.create_repo(repo_id=repo_id, repo_type="model", private=private, exist_ok=True)
          
          # Upload models
          api.upload_folder(
              folder_path="models",
              repo_id=repo_id,
              repo_type="model",
              commit_message=f"nightly: {revision}",
              revision=revision
          )
          
          # Upload calibration
          if pathlib.Path("configs/calibration.json").exists():
              api.upload_file(
                  path_or_fileobj="configs/calibration.json",
                  path_in_repo="calibration.json",
                  repo_id=repo_id,
                  repo_type="model",
                  commit_message=f"calibration: {revision}",
                  revision=revision
              )
          
          print(f"‚úÖ Published to https://huggingface.co/{repo_id}/tree/{revision}")
          PYTHON_SCRIPT

      # ========================================
      # 6. Upload Artifacts (backup)
      # ========================================
      - name: Upload artifacts (7 days)
        uses: actions/upload-artifact@v4
        with:
          name: models-artifacts-${{ env.RUN_DATE }}
          path: |
            models/**/*.joblib
            models/**/*.pkl
            configs/**/*.json
            artifacts/**
          if-no-files-found: warn
          retention-days: 7
          compression-level: 9

      # ========================================
      # 7. Summary
      # ========================================
      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "## üéØ Training Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: ${{ env.END_DATE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Symbols**: ${{ env.SYMBOLS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: \`models-${{ env.RUN_DATE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- View at: https://github.com/${{ github.repository }}/releases/tag/models-${{ env.RUN_DATE }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ env.HF_TOKEN }}" ]; then
            echo "- Hugging Face: \`${{ env.HF_REPO }}\`" >> $GITHUB_STEP_SUMMARY
          fi
