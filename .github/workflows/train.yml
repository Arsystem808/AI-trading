name: Train

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'Start date (YYYY-MM-DD)'
        required: false
        default: '2023-01-01'
      end:
        description: 'End date (YYYY-MM-DD)'
        required: false
        default: '2024-12-31'
  schedule:
    - cron: "30 5 * * *"

defaults:
  run:
    shell: bash

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      artifacts_dir: ${{ steps.paths.outputs.artifacts_dir }}
      start_date: ${{ steps.dates.outputs.start_date }}
      end_date: ${{ steps.dates.outputs.end_date }}
    steps:
      - uses: actions/checkout@v4
      - id: paths
        run: |
          set -euo pipefail
          ART_DIR="${GITHUB_WORKSPACE}/artifacts-train"
          mkdir -p "$ART_DIR"
          echo "artifacts_dir=$ART_DIR" >> "$GITHUB_OUTPUT"
      - id: dates
        run: |
          set -euo pipefail
          START="${{ github.event.inputs.start || '2023-01-01' }}"
          END="${{ github.event.inputs.end || '2024-12-31' }}"
          echo "start_date=$START" >> "$GITHUB_OUTPUT"
          echo "end_date=$END" >> "$GITHUB_OUTPUT"

  train:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        symbol: [AAPL, BTCUSD, GLD, GS, IWM, NVDA, SOXL, SPY, TLT, TSLA, XLY]
        include:
          - symbol: GLD
            epochs: 10
            cv_splits: 5
            test_size: 0.2
    env:
      ARTIFACTS_DIR: ${{ needs.prepare.outputs.artifacts_dir }}
      START_DATE: ${{ needs.prepare.outputs.start_date }}
      END_DATE: ${{ needs.prepare.outputs.end_date }}
      EPOCHS: ${{ matrix.epochs || 10 }}
      CV_SPLITS: ${{ matrix.cv_splits || 5 }}
      TEST_SIZE: ${{ matrix.test_size || 0.2 }}
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install "." || true; fi

      - name: Run training (with logs)
        run: |
          set -euo pipefail
          mkdir -p "${ARTIFACTS_DIR}/logs" "${ARTIFACTS_DIR}/models/${{ matrix.symbol }}"
          LOG="${ARTIFACTS_DIR}/logs/train_${{ matrix.symbol }}.log"
          echo "run_id=${GITHUB_RUN_ID} symbol=${{ matrix.symbol }} started=$(date -Is)" | tee "$LOG" >/dev/null

          args=( "scripts/train.py"
                 "--artifacts-dir" "${ARTIFACTS_DIR}"
                 "--models-dir" "${ARTIFACTS_DIR}/models/${{ matrix.symbol }}"
                 "--symbol" "${{ matrix.symbol }}"
                 "--start" "${START_DATE}"
                 "--end" "${END_DATE}" )

          [ -n "${EPOCHS:-}" ]    && args+=( "--epochs" "${EPOCHS}" )
          [ -n "${CV_SPLITS:-}" ] && args+=( "--cv-splits" "${CV_SPLITS}" )
          [ -n "${TEST_SIZE:-}" ] && args+=( "--test-size" "${TEST_SIZE}" )

          python "${args[@]}" 2>&1 | tee -a "$LOG"

      - name: List artifacts
        if: always()
        run: |
          echo "Artifacts at: ${ARTIFACTS_DIR}"
          ls -la "${ARTIFACTS_DIR}" || true

      - name: Upload models and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: train-${{ matrix.symbol }}-${{ github.run_id }}
          path: ${{ env.ARTIFACTS_DIR }}/
          if-no-files-found: warn
          include-hidden-files: true
