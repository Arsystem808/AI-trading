name: Train

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'Start (YYYY-MM-DD)'
        required: true
        type: string
        default: '2020-01-01'
      end:
        description: 'End (YYYY-MM-DD)'
        required: true
        type: string
        default: '2025-10-01'
      epochs:
        description: 'Epochs'
        required: false
        type: number
        default: 10
  schedule:
    - cron: '0 2 * * *'  # ежедневно в 02:00 UTC

# нужно для коммитов метрик
permissions:
  contents: write

# не допускаем наложений ночных прогонов/ручных запусков
concurrency:
  group: train-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
    steps:
      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi
      - name: Build unique matrix
        id: build
        run: |
          # исходный список тикеров из текущего файла (дубликаты будут убраны)
          SYMS='["AAPL","BTCUSD","TLT","SOXL","GLD","IWM","XLY","GS","NVDA","SPY","TSLA"]'
          MATRIX=$(echo "$SYMS" | jq -c 'unique | map({symbol:.})')
          echo "matrix={\"include\":$MATRIX}" >> "$GITHUB_OUTPUT"

  train:
    needs: prepare
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}

    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Run training
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        run: |
          python scripts/train.py \
            --symbol "${{ matrix.symbol }}" \
            --start "${{ inputs.start }}" \
            --end "${{ inputs.end }}" \
            --epochs "${{ inputs.epochs }}" \
            --outdir "artifacts/${{ matrix.symbol }}"

      - name: Publish perf to repo
        if: success()
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"
          mkdir -p data/perf/M7/${{ matrix.symbol }}
          cp artifacts/${{ matrix.symbol }}/metrics.json data/perf/M7/${{ matrix.symbol }}/metrics.json || true
          cp artifacts/${{ matrix.symbol }}/predictions.csv data/perf/M7/${{ matrix.symbol }}/predictions.csv || true
          git add data/perf/M7/${{ matrix.symbol }}/* || true
          git commit -m "perf: ${{ matrix.symbol }} ${{ github.run_id }}" || echo "Nothing to commit"
          for i in {1..5}; do git pull --rebase || true; git push && break || sleep 2; done

      - name: Upload models and logs
        uses: actions/upload-artifact@v4
        with:
          name: model-${{ matrix.symbol }}-${{ github.run_id }}
          path: artifacts/${{ matrix.symbol }}/**
          if-no-files-found: error
          retention-days: 14
