name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: CI / lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            tox.ini

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # гарантируем наличие инструментов
          pip install "black~=24.0" "flake8~=7.0"

      - name: Lint (black, flake8)
        shell: bash
        run: |
          black --check .
          flake8 .

  test:
    name: CI / test
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 30
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            tox.ini

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install "pytest~=8.0"

      - name: Run tests (pytest)
        shell: bash
        run: |
          if ls -1 **/*_test.py **/test_*.py 2>/dev/null | head -n1 >/dev/null || [ -d tests ]; then
            pytest -q
          else
            echo "No tests found, skipping"
          fi

  typecheck:
    name: CI / typecheck
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 15
    env:
      PYTHONPATH: ${{ github.workspace }}
      MYPYPATH: ${{ github.workspace }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            mypy.ini

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install "mypy~=1.10"

      - name: Bootstrap mypy.ini if missing
        shell: bash
        run: |
          if [ ! -f mypy.ini ] && [ ! -f pyproject.toml ]; then
            printf "%s\n" \
              "[mypy]" \
              "python_version = 3.11" \
              "warn_unused_ignores = True" \
              "warn_return_any = True" \
              "no_implicit_optional = True" \
              > mypy.ini
          fi

      - name: Run mypy
        shell: bash
        run: |
          mypy .
