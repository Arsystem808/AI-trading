name: CI
on:
  push:
feature/calibration-metrics
  pull_request:
    branches: [ main, master ]
    paths:
      - "**.py"
      - "requirements*.txt"
      - ".github/workflows/**"
  pull_request:
    branches: [ main, master ]
    paths:
      - "**.py"
      - "requirements*.txt"
      - ".github/workflows/**"
      - "docs/**"
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

main
jobs:
  lint:
    name: CI / lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
feature/calibration-metrics
          python-version: '3.11'
          cache: pip
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
main
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
feature/calibration-metrics
          pip install flake8
      - name: Lint
        run: flake8
          pip install black flake8
      - name: Lint (soft)
        run: |
          paths=("scripts" "services" "core/strategy.py")
          any=0; for p in "${paths[@]}"; do [[ -e "$p" ]] && any=1; done
          if [[ $any -eq 1 ]]; then
            black --check --diff "${paths[@]}" || true
            flake8 "${paths[@]}" || true
          else
            echo "No lint targets"
          fi

main
  test:
    name: CI / test
    runs-on: ubuntu-latest
feature/calibration-metrics
    timeout-minutes: 15
    env:
      PYTHONPATH: ${{ github.workspace }}
main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
feature/calibration-metrics
          python-version: '3.11'
          cache: pip
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
      - name: Detect tests
        id: detect
        run: |
          if git ls-files 'tests/**/*.py' | grep -q .; then
            echo "HAS_TESTS=true" >> "$GITHUB_ENV"
          else
            echo "HAS_TESTS=false" >> "$GITHUB_ENV"
          fi
main
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest
      - name: Test
        run: pytest -q
