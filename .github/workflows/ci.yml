# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, master ]
    paths:
      - "**.py"
      - "**.toml"
      - ".flake8"
      - ".streamlit/**"
      - "requirements*.txt"
      - ".github/workflows/**"
      - "docs/**"
  pull_request:
    branches: [ main, master ]
    paths:
      - "**.py"
      - "**.toml"
      - ".flake8"
      - ".streamlit/**"
      - "requirements*.txt"
      - ".github/workflows/**"
      - "docs/**"
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: CI / lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install black flake8
      - name: Lint (soft)
        run: |
          paths=("scripts" "services" "core/strategy.py")
          any=0; for p in "${paths[@]}"; do [[ -e "$p" ]] && any=1; done
          if [[ $any -eq 1 ]]; then
            black --check --diff "${paths[@]}" || true
            flake8 "${paths[@]}" || true
          else
            echo "No lint targets"
          fi

  typecheck:
    name: CI / typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONPATH: ${{ github.workspace }}
      MYPYPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            mypy.ini
      - name: Bootstrap mypy config (if missing)
        run: |
          if [ ! -f mypy.ini ] && [ ! -f pyproject.toml ]; then
            cat > mypy.ini <<'EOF'
[mypy]
python_version = 3.11
warn_unused_ignores = True
warn_return_any = True
no_implicit_optional = True
# Игнорировать только ошибки по внешним библиотекам без аннотаций
disable_error_code = import-untyped

# Пример точечного игнора для популярных либ без типов
[mypy-requests.*]
ignore_missing_imports = True
EOF
            echo "mypy.ini created"
          else
            echo "Using repo mypy config"
          fi
      - name: Install deps for typecheck
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install mypy
          # Установить проект в editable-режиме для корректного резолва импортов
          if [ -f pyproject.toml ] || [ -f setup.py ]; then pip install -e . || true; fi
          # Установить популярные stubs при наличии соответствующих зависимостей
          pip install "types-requests" || true
      - name: mypy
        run: |
          mypy .

  test:
    name: CI / test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            pyproject.toml
      - name: Detect tests
        run: |
          if git ls-files "tests/*.py" "tests/**/*.py" | grep -q .; then
            echo "HAS_TESTS=true" >> "$GITHUB_ENV"
          else
            echo "HAS_TESTS=false" >> "$GITHUB_ENV"
          fi
      - name: Install deps
        if: env.HAS_TESTS == 'true'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
      - name: Run tests (soft)
        if: env.HAS_TESTS == 'true'
        continue-on-error: true
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=./ --cov-report=xml
      - name: Upload coverage
        if: env.HAS_TESTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
      - name: Skip note
        if: env.HAS_TESTS != 'true'
        run: echo "No tests found, skipping"
